1. 콜백 함수 내부의 this에 다른 값 바인딩하기
    객체의 메서드를 콜백 함수로 전달할 때 this가 해당 객체를 바라보게 하기 위해
    this를 다른 변수에 담아 콜백 함수에서 this 대신 그 변수를 사용하는 방법이 있다.
    var obj = {
        name: 'obj1',
        func: function(){
            var self = this;
            return function(){
                console.log(self.name);
	        };
        }
    };
    var callback = obj1.func();
    setTimeout(callback, 1000);

    this를 사용하지 않고도 가능하다.
    var obj1 = {
        name: 'obj1',
        func: function(){
            console.log(obj1.name);
	        }
    };
    setTimeout(obj1.func, 1000);

2. 콜백지옥, 비동기 제어
    콜백지옥이란 콜백 함수를 익명 함수로 전달하는 과정이 반복돼 코드의 들여쓰기 수준이
    감당하기 힘들 정도로 깊어지는 현상을 말한다.

    동기적인 코드는 현재 실행 중인 코드가 완료돼야 다음 코드를 실행하고
    비동기적인 코드는 현재 실행 중인 코드의 완료 여부와 무관하게 다음 코드로 넘어가는
    것을 말한다.
    동기적인 코드란 CPU의 계산에의해 즉시 처리가 가능한 대부분의 코드를 말한다.
    반면, 사용자의 요청에 의해 특정 시간이 경과되기 전까지 어떤 함수의 실행을 보류,
    대기, 웹브라우저가 아닌 별도의 대상에 요청해 응답이 왔을 때 실행하도록 하는 등과
    관련된 코드는 비동기적인 코드이다.

    가독성 문제와 어색함을 동시에 해결하는 간단한 방법으로는 익명의 콜백 함수들을
    모두 기명함수로 전환하는 것이다.
    일회성 함수를 전부 변수에 할당하는 것이 코드를 따라다녀야하는 번거로움이 있기 때문에
    ES6에서는 Promise, generator 등이 도입됐고 ES2017에서는 async/await이 도입됐다.

    첫번째로, promise를 사용하는 방식
    인자로 넘겨주는 콜백함수는 호출할 때 바로 실행되지만 내부에 resolve or reject
    함수를 호출하는 구문이 있을 경우 둘 중하나가 실행되기 전까지는 다음(then),
    오류 구문(catch)로 넘어가지 않는다.

    두번째로, generator를 사용하는 방식
    var  coffeeGenerator = function*(){

    };
    과 같이 '*'이 붙은 함수가 Generator 함수이다. 이 함수를 실행하면 Iterator가
    반환되는데 Iterator는 next라는 메서드를 가지고 있다.
    next메서드를 호출하면 Generator 함수 내부에 가장 먼저 등장하는 yield에서 함수의
    실행을 멈추고 다음 yield에서 함수의 실행을 멈춘다.
    비동기 작업이 완료되는 시점마다 next를 호출해 동기적 표현이 가능해진다.


    