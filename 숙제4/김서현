[103]
4-4 콜백 함수 내부의 this에 다른 값 바인딩하기
Q 객체의 메서드를 콜백 함수로 전달하면 해당 객체를 this로 바라볼 수 없게 된다는 점이 있으나
콜백 함수 내부에서 this가 객체를 바라보게 하고 싶을때?
A 전통적으로는 this를 다른 변수에 담아 콜백 함수로 활용할 함수에서 this대신 그 변수를 사용하게 하고, 이를 클로저로 만드는 방식이 많이 쓰임.

[104]예제 4-9 콜백 함수 내부에서 this를 사용하지 않은 경우
var obj1 = {
    name: 'obj1',
    func: function(){
        console.log(obj1.name);

    }
};
setTimeout(obj1.func,1000);

직관적이며 간결하지만, 작성한 함수를 this를 이용해 다양한 상황에 재활용할 수 없는 상황.
처음부터 바라볼 객체를 명시적으로 obj1로 지정했기 때문에 어떤 방법으로도 다른 객체를 바라보게끔 할 수 없음
다양한 객체에 재활용할 필요성이 없는 경우라면 본 예제와 같은 방식도 괜찮긴함.

** 전통적인 방식의 아쉬움을 보완하는 방법 
>> ES5에서 등장한 bind 메서드를 이용하는 방법

예제 4-11 콜백 함수 내부의 this에 다른 값을 바인딩하는 방법 - bind 메서드 활용

var obj1 = {
    name: 'obj1',
    func: function(){
        console.log(this.name);
    }
};
setTimeout(obj1.func.bind(obj1), 1000);

var obj2 = {name: 'obj2'};
setTimeout(obj1.func.bind(obj2), 1500);

[106] 4-5 콜백 지옥과 비동기 제어

콜백 지옥: 콜백 함수를 익명 함수로 전달하는 과정이 반복되어 코드의 들여쓰기 수준이 감당하기 힘들정도로 깊어지는 현상
가독성이 떨어지며 코드 수정이 어려워짐

동기적인 코드 : 현재 실행 중인 코드가 완료된 후에야 다음 코드를 실행하는 방식
CPU 계산에 의해 즉시 처리가 가능한 대부분의 코드,
계산식이 복잡해서 CPU가 계산하는 시간이 매우 많이 필요한 경우라도 포함.
ㅣ
비동기적인 코드: 현재 실행중인 코드의 완료 여부와 무관하게 즉시 다음코드로 넘어가는 방식
setTimeout 사용자의 요청에 의해 특정 시간이 경과되기 전까지 어떤 함수의 실행을 보류
addEventListener 사용자의 직접적인 개입이 있을 때 비로소 어떤 함수를 실행하도록 대기
XMLHttpRequest 웹브라우저 자체가 아닌 별도의 대상에 무언가를 요청하고 그에 대한 응답이 왔을떄
비로소 어떤 함수를 실행하도록 대기
별도의 요청, 실행 대기, 보류등과 관련된 코드

[107]예제 4-12 콜백 지옥 예시
setTimeout(function (name){
    var coffeeList = name;
    console.log(coffeeList);

    setTimeout(function (name){
        coffeeList += ',' + name;
        console.log(coffeeList);

        setTimeout(function (name){
            coffeeList += ',' + name;
            console.log(coffeeList);

            setTimeout(function (name){
                coffeeList +=',' + name;
                console.log(coffeeList);
            }, 500, '카페라떼');
        }, 500, '카페모카');
    }, 500, '아메리카노');
}, 500, '에스프레소');

코드 설명 : 0.5초 주기마다 커피 목록을 수집하고 출력함. 각 콜백은 커피 이름을 전달하고 목록에 이름을 추가.
목적 달서에는 지장이 없으나 들여쓰기 수준이 과도하게 깊어졌을 뿐더러 값이 전달되는 순서가 '아래에서 위로'향하고 있어
어색하게 느껴짐

>> 가독성 문제와 어색함을 동시에 해결하는 그나마 쉬운 방법: 익명의 콜백 함수를 모두 기명함수로 전환하는 것.

[108] 예제 4-13 콜백 지옥 해결 - 기명함수로 변환

var coffeeList = '';

var addEspresso = function (name){
    coffeeList = name;
    console.log(coffeeList);
    setTimeout(addAmericano, 500, '아메리카노');
};
var addAmericano = function(name){
    coffeeList += ',' + name;
    console.log(coffeeList);
    setTimeout(addMocha, 500, '카페모카');
};
var addMocha = function(name){
    coffeeList += ',' + name;
    console.log(coffeeList);
    setTimeout(addMocha, 500, '카페모카');
    };
var addMocha = function (name){
    coffeeList += ',' + name;
    console.log(coffeeList);
    setTimeout(addLatte, 500, '카페라떼');

};
var addLatte = function(name){
    coffeeList += ',' + name;
    console.log(coffeeList);

};
setTimeout(addEspresso, 500, '에스프레소');

코드의 가독성을 높이면서 함수 선언과 함수 호출만 구분할 수 있다면 위 > 아래로 순서대로 읽어내려가는데 어려움이 없음
변수를 최상단으로 끌어올림으로써 외부에 노추로디게 됐으나 전체를 즉시 실행 함수등으로 감싸면 간단히 해결될 문제임

[109] JS의 비동기적인 일련의 작업을 동기적으로, 또는 동기적인 것처럼
보이게끔처리해주는 장치를 마련하고자 꾸준히 노력함 
ES6 : Promise, Generator
ES2017: async/await

[110] 예제 4-14 비동기 작업의 동기적 표현 - Promise

new Promise(function(resolve){
    setTimeout(function (){
        var name = '에스프레소';
        console.log(name);
        resolve(name);
    }, 500);
}).then(function(prevName){
    return new Promise(function(resolve){
    setTimeout(function (){
        var name = prevName + '아메리카노';
        console.log(name);
        resolve(name);
    }, 500);
});
}).then(function(prevName){
    return new Promise(function(resolve){
    setTimeout(function (){
        var name = prevName + '카페모카';
        console.log(name);
        resolve(name);
    }, 500);
});
}).then(function(prevName){
    return new Promise(function(resolve){
    setTimeout(function (){
        var name = prevName + '카페라떼';
        console.log(name);
        resolve(name);
    }, 500);
});
});

new 연산자와 함께 호출한 Promise의 인자로 넘겨주는 콜백 함수는 호출할 때 바로 실행되나 
그 내부에 resolve  또는 reject 함수롤 호출하는 구문이 있을 경우 둘 중 하나가 실행되기 전까지는 다음(then) 또는 오류 구문(catch)을 넘어가지 않음
따라서 비동기 작업이 완료될 때 비로소 resolve 또는 reject를 호출하는 방법으로 비동기 작업의 동기적 표현이 가능함

[111] 예제 4-16 비동기 작업의 동기적 표현(3) - Generator
var addCoffee = function (prevName, name){
    setTimeout(function(){
        coffeeMaker.next(prevName ? prevName + ',' + name: name);
    }, 500);
};
var coffeeGenerator = function* (){
    var espresso = yield addCoffee('', '에스프레소');
    console.log(espresso);
    var americano = yield addCoffee(espresso, '아메리카노');
    console.log(americano);
    var espresso = yield addCoffee('', '카페모카');
    console.log(mocha);
    var espresso = yield addCoffee('', '카페라떼');
    console.log(latte);
};
var coffeeMaker = coffeeGenerator();
coffeeMaker.next();

Generator 함수 실행시 Iterator가 반환되는데, Iterator는 next라는 메서드를 가지고 있음
이 next메서드를 호출하면 Generator 함수 내부에서 가장 먼저 등장하는 yield에서 함수의 실행을 멈춤.
이후 다시 next 메서드를 호출하면 앞서 멈췄던 부분부터 시작해 그 다음에 등장하는 yield에서 함수의 실행을 멈춤.
>> 비동기 작업이 완료되는 시점마다 next 메서드를 호출해준다면 Generator 함수 내부의 소스가 위에서부터 아래로 순차적으로 진행됨.

[112] 예제 4-17 비동기 작업의 동기적표현 - Promise + Async/await
var addCoffee = function(name){
    return new Promise(function(resolve){
        setTimeout(function(){
            resolve(name);
        }, 500);
    });
};
var coffeeMaker = async function (){
    var coffeeList = '';
    var _addCoffee = async function (name){
        coffeeList += (coffeeList ? ',' : '') + await addCoffee(name);
    };
    await _addCoffee('에스프레소');
    console.log(coffeeList);
    await _addCoffee('아메리카노');
    console.log(coffeeList);
    await _addCoffee('카페모카');
    console.log(coffeeList);
    await _addCoffee('카페라떼');
    console.log(coffeeList);
};
coffeeMaker();

async/await
비동기 작업을 수행하고자 하는 함수 앞에 async를 표기하고, 함수 내부에서 실질적인 비동기 작업이 필요한 위치마다 await를 표기하는 것만으로도
뒤의 내용을 Promise로 자동전환하고, 해당 내용이 resolve된 이후에야 다음으로 진행함.
>> Promise, then 과 흡사한 효과를 얻을 수 있음. 

[113] 4-6 정리
-콜백 함수는 다른 코드에 인자로 넘겨줌으로써 그 제어권도 함께 위임한 함수다.
-제어권을 넘겨받은 코드는 다음과 같은 제어권을 가진다.
 1 콜백 함수를 호출하는 시점을 스스로 판단해서 실행함
 2 콜백 함수를 호출할 때 인자로 넘겨줄 값들 및 그 순서가 정해져 있음. 이 순서를 따르지 않고 코드를 작성하면 엉뚱한 결과를 얻음
 3 콜백 함수의 this가 무엇을 바라보도록 할지가 정해져 있는 경우도 있음. 
   정하지 않은 경우 전역객체를 바라봄. 사용자 임의로 this를 바꾸고 싶을 경우 bind 메서드를 활용하면 됨
-어떤 함수에 인자로 메서드를 전달하더라도 이는 결국 함수로서 실행됨 비동기 제어를 위해 콜백함수를 사용하다 보면 콜백 지옥에 빠지기 쉬움.
 최근 EMCAScript에는 Promise, Generator, async/await등 콜백 지옥에서 벗어날 수 있는 훌륭한 방법들이 속속 등장하고 있음. 
