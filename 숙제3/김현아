<02>
* 명시적으로 this 바인딩하는 방법
    - "call 메서드" : 메서드의 호출 주체인 함수를 '즉시 실행'하도록 하는 명령
        (1) 첫 번째 인자를 this로 바인딩한다
        (2) 이후의 인자들을 호출할 함수의 매개변수로 한다
        ->  함수를 그냥 실행하면 this는 '전역객체를 참조'하지만, call 메서드를 이용하면 '임의의 객체를 this로 지정'

            (i) var func = function (a, b, c){
                 console.log(this, a, b, c);
                } ;

                func(1, 2, 3);                  // Window{...} 1 2 3
                func.call({ x: 1 }, 4, 5, 6);   // { x: 1 } 4 5 6

            (ii) var obj = {
                 a: 1, 
                 method: function (x, y) {
                    console.log(this.a, x, y);
                  }
                };

                obj.method(2, 3);               // 1 2 3
                obj.method.call({a: 4}, 5, 6);  // 4 5 6 
    - "apply 메서드" : call 메서드와 기능적으로 완전히 동일
        + 차이점 
            * call 메서드 : 첫 번째 인자를 제외한 나머지 모든 인자들을 호출할 함수의 매개변수로 지정
            * apply 메서드 : 두 번째 인자를 배열로 받아 그 배열의 요소들을 호출할 함수의 매개변수로 지정

            (i) var func = function (a, b, c) {
                    console.log(this, a, b, c);
                };
                func.apply({x: 1}, [4, 5, 6]);  // {x: 1} 4 5 6

                var obj = {
                    a: 1,
                    method: function (x, y) {
                        console.log(this.a, x, y);
                    }
                };
                obj.method.apply({ a: 4 }, [5, 6]);  // 4 5 6

      => call/ apply 메서드의 활용
        : 객체에는 배열 메서드를 직접 적용할 수 없다. 
          키가 0 또는 양의 정수인 프로퍼티가 존재하고 length 프로퍼티의 값이 0 또는 양의 정수인 객체(배열의 구조와 유사함 객체)의 경우 배열 메서드 차용 가능
        - 유사배열객체에 배열 메서드 적용
            - 유사배열객체에 배열 메서드 적용
            - arguments, NodeList에 배열 메서드 적용
            - 문자열에 배열 메서드 적용
            - ES6의 Array.from 메서드
        - 생성자 내부에서 다른 생성자를 호출 : 생성자 내부에 다른 생성자와 공통된 내용이 있을 경우 call/apply 이용하여 다른 생성자 호출 -> 간단하게 반복 줄임
        - 여러 인수를 묶어 하나의 배열로 전달하고 싶을 때 - apply 활용
            : 여러 개의 인수를 받는 메서드에게 하나의 배열로 인수들을 전달하고 싶을 떄 사용 ((ex) 배열에서 최대/최솟값을 구해야 할 경우)
            - 여러 인수를 받는 메서드에 apply 적용
            - ES6의 펼치기 연산자 활용
    
    - "bind 메서드" : ES5에서 추가된 기능 (call과 비슷하지만 즉시 호출하지는 않고 넘겨 받은 this 및 인수들을 바탕으로 새로운 함수를 반환하기만 하는 메서드)
        * 목적
            - this 미리 적용
            - 부분 적용 함수를 구현
        - name 프로퍼티 : bind 메서드를 적용해서 새로 만든 함수는 name 프로퍼티에 동사 bind의 수동태인 bound라는 접두어가 붙는다.
            -> 기존의 call/ apply 보다 코드를 추적하기에 더 수월
        - 상위 컨텍스트의 this를 내부함수나 콜백 함수에 전달하기 
    
    - 화살표 함수의 예외사항
        -> ES6에 새롭게 도입된 화살표 함수는 실행 컨텍스트 생성 시 this를 바인딩하는 과정이 제외됨. (이 함수 내부에는 this가 아예 없음. 접근하고자 하면 스코프체인상 가장 가까운 this에 접근하게 됨)

    - 콜백 함수 내에서의 this (별도의 인자로 this를 받는 경우)
        콜백 함수를 인자로 받는 메서드 중 일부는 추가로 this로 지정할 객체를 인자로 지정할 수 있다.
        + report 객체에 sum, count 프로퍼티가 있고, add, average 메서드가 있다