1-1. call 메서드
    call 메서드는 메서드의 호출 주체인 함수를 즉시 실행하도록 하는 명령.
    call 메서드는 첫번째 인자를 this로 바인딩하고 이후의 인자들을 호출할 함수의
    매개변수로 한다.

    var func = function(a,b,c){
        console.log(this, a, b, c);
    }
    func(1,2,3); // window{...}, 1, 2, 3
    func.call({x:1},4, 5, 6); // {x:1}, 4, 5, 6

1-2. apply 메서드
    apply 메서드는 call 메서드와 기능적으로 완전히 동일하다.
    call 메서드는 첫 번째 인자를 제외한 나머지 인자들을 매개변수로 지정하고
    apply 메서드는 두 번째 인자를 배열로 받아 매개변수로 지정한다.

1-3-1. call / apply 메서드 활용
    slice 메서드는 원래 시작 인덱스값과 마지막 인덱스값을 받아 시작값부터
    마지막값의 앞부분까지의 배열 요소를 추출하는 메서드.

    call / apply 메서드를 이용해 유사배열객체에 모든 배열 메서드를 적용할 수
    있지만 문자열의 경우 length 프로퍼티가 읽기 전용이기 때문에 원본 문자열에
    변경을 가하는 메서드는 에러를 던진다.

    call / apply 메서드를 활용해 형변환 하는 것은 본래의 의도와 동떨어진다.
    ES6에서는 유사배열객체 or 순회 가능한 모든 종류의 데이터 타입을 배열로 전환하는
    Array.from 메서드를 도입.

1-3-2. 생성자 내부에서 다른 생성자 호출
    function Person(name, gender){
        this.name = name;
        this.gender = gender;
    }
    function Student(name,gender,school){
        Person.call(this, name, gender);
        this.school = school;
    }
    var by = new Student('보영', 'female', '단국대');

2. bind 메서드
    bind 메서드는 call과 비슷하지만 함수를 즉시 호출하지 않고 너겨 받은 this
    및 인수들을 바탕으로 새로운 함수를 반환하기만 하는 메서드.

    var func = function(a, b, c, d){
        console.log(this, a, b, c, d);
    };
    func(1, 2, 3, 4); // window{...}, 1, 2, 3, 4

    var bindFunc1 = func.bind({x:1});
    bindFunc1(5,6,7,8); // {x:1}, 5, 6, 7, 8

    var bindFunc2 = func.bind({x:1}, 4, 5);
    bindFunc2(6,7); // {x:1}, 4, 5, 6 ,7

2-1. name 프로퍼티
    어떤 함수의 name 프로퍼티가 'bound xxx'라면 함수명이 xxx인 원본 함수에
    bind메서드가 적용한 새로운 함수라는 의미이다.

2-2. 상위 컨텍스트의 this를 내부함수나 콜백 함수에 전달.
    메서드의 내부함수에서 메서드의 this를 그대로 바라보게 하기 위해
    self 등의 변수를 활용해 우회했지만 call, apply or bind 메서드를
    통해 깔끔하게 처리 가능.

    var obj = {
        outer : function(){
            console.log(this);
            var innerFunc = function(){
                console.log(this);
            };
            innerFunc.call(this);
        }
    };
    obj.outer();
    var obj = {
        outer : function(){
            console.log(this);
            var innerFunc = function(){
                console.log(this);
            }.bind(this);
            innerFunc();
        }
    };
    obj.outer();

2-3. 화살표 함수의 예외사항
    화살표 함수는 실행 컨텍스트 생성 시 this를 바인딩하는 과정이 제외되었다.
    함수 내부에 this가 없고 접근하려 하면 스코프체인상 가장 가까운 this에 접근.
    var obj = {
        outer : function(){
            console.log(this);
            var innerFunc = () => {
                console.log(this);
            };
            innerFunc();
        }
    };
    obj.outer();
3. 별도의 인자로 this를 받는 경우(콜백 함수 내에서의 this)
    forEach는 배열을 순회하면서 콜백 함수를 실행하는데,
    이 때 콜백 함수내부에서의 this는 forEach 함수의 두 번째 인자로 전달해준
    this가 바인딩 된다.
    var report = {
        sum: 0,
        count: 0,
        add: function(){
            var args = Array.prototype.slice.call(arguments);
            args.forEach(function(entry){
                this.sum += entry;
                ++this.count;
            },this);
        }
    }
    report.add(60,85,95);