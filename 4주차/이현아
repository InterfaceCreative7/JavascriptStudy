콜백함수?
= 다른 코드의 인자로 넘겨주는 함수(특정조건이 갖추어졌는지 여부를 스스로 판단하고 직접 호출.)
== 콜백함수는 다른 코드에게 인자로 넘겨줌으로써 그 제어권도 함께 위임한 함수, 
콜백함수를 위임받은 코드는 자체적인 내부 로직에 의해 이 콜백함수를 적절한 시점에 실행할 것
이처럼 콜백함수는 다른 코드에게 인자를 넘겨줌으로써 그 제어권도 함께 위임한 함수로 위임받은 코드는 잧적인 내부로직에 의해 이 콜백 함수를 적절한 시점에 실행할 것이다.

* setInterval를 실행하면 반복적으로 실행되는 내용 자체를 특정할 수 있는 고유한 아이디 값이 반환된다.
이를 변수에 담는 이유: 반복실행되는 중간에 종료할 수 있게하기 위해서
콜백함수의 제어권을 넘겨받은 코드는 콜백함수 호출시점에 대한 제어권을 가진다.

map 메서드는 메서드의 대상이 되는 배열의 모든 요소들을 처음부터 끝까지 하나씩 꺼내어 콜백함수를 반복호출하고 함수의 실행을 모아 새로운 배열을 만든다.

 ** 콜백함수의 첫번째 인자에는 배열의 요소 중 현재값이, 두번째 인자에는 현재값의 인덱스가, 세번째 인자에는 map메서드의 대상이 되는 배열자체가 담긴다.

*제이쿼리 메서드(DOM을 조금 더 쉽게 처리하기 위한 라이브러리 덩어리) = 기본적으로 첫번째인자에 index가 두번째 인자에 currentValue가 온다.

/ map메서드를 제이쿼리 메서드 방식처럼 순서를 바꾸어 사용한다면 각 단어의 의미는 고유하며 순서만 바뀐것으로 크게 문제가 없을 것 이라고 생각하지만 
단어의 의미는 사용자가 명명한 것일 뿐 컴퓨터는 순서에 의해 인식하게 되기 때문에 문제가 발생한다.

이렇기 때문에 map메서드를 호출해서 원하는 결과를 얻으려면 정의된 규칙에 따라 콜백함수의 인자로 넘어올 값들을 순서에 포함시켜야한다.
==> 결과적으로 인자들에게 어떤 값을 어떤 순서로 넘길 것인지는 메서드에게 권한이 있으므로 콜백함수의 호출시점에 제어권을 가지게 된다.

메서드 구현의 핵심 분류
1) this에 thisArg 값이 있을 경우에는 그 값을 지정
2) 없을 경우에는 전역객체를 지정하고
=> 첫번째 인자에는 메서드의 this가 배열을 가릴킬 것이므로 배열의 i번째 요소값을, 두번째인자에는 i값을 , 세번째 인자에는 배열자체를 지정해 호출한다.
이 결과 변수에 담겨 mappedArr의 i번째 인자에 할당됩니다.

* 콜백함수로 어떤 객체의 메서드를 전달하더라도 그 메서드는 메서드가 아닌 함수로서 호출된다.