1. 콜백 함수란
    콜백 함수는 다른 코드에게 인자로 넘겨줌으로써 그 제어권도 함께 위임한 함수이다.
    콜백 함수를 위임받은 코드는 자체적인 내부 로직에 의해 콜백 함수를
    적절한 시점에서 실행한다.

    콜백 함수의 제어권을 넘겨받은 코드는 콜백 함수 호출 시점에 대한 제어권을
    가진다.
    var newArr = [10,20,30].map(function(currentValue, index){
        console.log(currentValue, index);
        return currentValue + 5;
    });
    console.log(newArr);

    첫 번째 인자를 index 두 번째 인자를 currentValue로 jQuery방식으로 순서를
    바꾸면 원하는 결과를 얻을 수 없다. map 메서드에 정의된 규칙을 따라야 한다.

    콜백 함수에 별도로 this가 될 대상을 지정한 경우에는 그 대상을 참조한다.
    Array.prototype.map = function(callback, thisArg){
        var mappedArr = [];
        for (var i = 0; i < this.length; i++){
            var mappedValue = callback.call(thisArg || window, this[i], i, this);
            mappedArr[i] = mappedValue;
        }
        return mappedArr;
    };
    call 메서드의 첫 번째 인자에 콜백 함수 내부에서 this가 될 대상을 바인딩하기 때문이다.

2. 콜백 함수는 함수다.
    어떤 객체의 메서드를 콜백 함수로 전달해도 메서드는 메서드가 아닌 함수로서 호출된다.

    var obj = {
        logValues : function(v, i){
            console.log(this, v, i);
        }
    };
    [4,5,6].forEach(obj.logValues); // window{...}, 4, 0 ~ window{...}, 6, 0
    obj를 this로 하는 메서드를 그대로 전달한 것이 아닌 함수만 전달 한 것이다.
    메서드로서 호출할 때가 아닌 한 obj와 직접적인 연관이 없어지게 되고
    별도로 this를 지정하는 인자를 지정하지 않았으므로 전역 객체를 바라보게 된다.