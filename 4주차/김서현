[94]
Chapter 04 콜백함수
4-1 콜백함수란?
콜백함수 : 다른 코드의 인자로 넘겨주는 함수
콜백함수는 제어권과 관련이 깊음
callback : 되돌아 호출해달라, 어떤 함수 X를 호출하면서 '특정 조건 일 때' 함수 Y를 실행해서 나에게 알려달라
콜백 함수는 다른코드에게 인자로 넘겨주면서 그 제어권도 함께 위임한 함수.
콜백 함수를 위임받은 코드는 자체적인 내부 로직에 의해 이 콜백 함수를 적절한 시점에 실행할 것임. 

[95] 4-2 제어권

4-2-1 호출 시점
예제 4-1 콜백 함수 예제(1-1)setInterval
var count = 0;
var timer = setInterval(function (){
    console.log(count);
    if(++count>4) clearInterval(timer);
}, 300);

setInterval을 호출할 떄 두 개의 매개변수를 전달했음.
한개는 익명 함수, 두 번째는 300이라는 숫ㅈ.

setInterval구조 : var intervalID = scope.setInterval(func, delay[, param1, param2,....]);
scope에는 Window 객체 또는 Worker의 인스턴스가 들어올 수 있음. 
두 객체 모두 setInterval 메서드 제공 > 일반적인 브라우저 환경에서는 window 생략해 함수처럼 사용 가능
매개변수로는 func, delay 값을 반드시 전달해야함
세 번째 매개변수부터는 선택적. 
func는 함수, delay 밀리초 단위 숫자, 나머지는 func 함수를 실행할 떄 매개변수로 전달할 인자.
func에 넘겨준 함수는 매 dealy마다 실행, 그 결과 어떠한 값도 리턴 안함
setInterval실행시 반복적으로 실행되는 내용 자체를 특정할 수 있는 고유한 ID 값 반환
이를 변수에 담은 이유: 반복 실행되는 중간에 종료할 수 있게 하기 위해서

[96]예제 4-2, 콜백 함수 예제
var count = 0;
var cbFunc = function(){
    console.log(count);
    if (++count >4) clearInterval(timer);
};
var timer = setInterval(cbFunc, 300);
timer 변수에 setInterval의 ID값이 담김
setInterval에 전달한 첫 번째 인자인 cbFunc함수는 0.3초 마다 자동으로 실행될 것임
콜백 함수 내부에서 count 값 출력
count 1만큼 증가시킨 다음, 그 값이 4보다 크면 반복 실행을 종료 하라고 함

제어권을 넘겨받은 setInterval이 스스로의 판단에 따라 적절한 시점에 (0.3s) 이 익명함수를 시행함.
이처럼 콜백 함수의 제어권을 넘겨받은 코드는 콜백 함수 호출 시점에 대한 제어권을 가짐. 

[98]4-2-2 인자
예제 4-3 콜백함수예제, Array.prototype.map
var newArr = [10,20,30].map(function (currentValue, index){
    console.log(currentValue, index);
    return currentValue +5;

});
console.log(newArr); 

*Array의 prototype에 담긴 map 메서드의 구조
Array.prototype.map(callback[,thisArg])
callback: function(currentValue, index, array)
map 메서드는 메서드의 대상이 되는 배열의 모든 요소들을 처음부터 끝까지 하나씩 꺼내어 콜백함수를 반복 호출하고, 
콜백 함수의 실행 결과들을 모아 새로운 배열을 만듦. 
콜백함수의 첫 번째 인자: 배열의 요소 중 현재값
두 번째 : 현재값의 인덱스
세 번째 : map메서드의 대상이 되는 배열 자체. 

[99]
제이쿼리(jQuery)의 메서드들은 기본적으로 첫 번째 인자 :index, 2nd : currentValue 가 옴.
만약 map메서드를 제이쿼리의 방식처럼 순서를 바꾸어 사용하는거 주의해야함
사람은 단어로 접근하지만, 컴퓨터는 그저 순서에 의해서만 각각을 구분하고 인식함. 

>>map메서드를 호출해서 원하는 배열을 얻으려면 map메서드에 정의된 규칙에 따라 함수를 작성해야 함.
map 메서드에 정의된 규칙에는 콜백 함수의 인자로 넘어올 값들 및 그 순서도 포함돼 있음.
콜백 함수를 호출하는 주체가 사용자가 아닌 map메서드 이므로 
map메서드가 콜백 함수를 호출 할 때 인자에 어떤 값들은 어떤 순서로 넘길 것인지가 전적으로 map 메서드에게 달렸음.

>> 콜백 함수의 제어권을 넘겨받은 코드는 콜백 함수를 호출할 때 인자에 어떤 값들을 어떤 순서로 넘길 것인지에 대한 제어권을 가짐.

[100] 4-2-3 this
*3-1-4 : 콜백 함수도 함수이기에 기본적으로 this가 전역객체를 참조하지만, 
제어권을 넘겨받을 코드에서 콜백 함수에 별도로 this가 될 대상을 지정한 경우에는 그 대상을 참조하게 된다.

[101]예제 4-5 콜백함수, Array.prototype.map - 구현
Array.prototype.map = function (callback, thisArg){
    var mappedArr = [];
    for (var i =0; i< this.length;i ++){
        var mappedValue = callback.call(thisArg || window, this[i],i,this);
        mappedArr[i] = mappedValue;}

    
    return mappedArr;
};
*this에 다른 값이 담기는 이유
제어권을 넘겨받을 코드에서 call/apply 메서드의 첫 번째 인자에 콜백 함수 내부에서의 this가 될 대상을 명시적으로 바인딩하기 떄문

예제 4-6 콜백함수내부에서의 this
setTimeout( function(){console.log(this);}, 300); //1
[1,2,3,4,5].forEach(function (x)){
    console.log(this); //2
});

document.body.innerHTML += '<button id="a">클릭</button>';
document.body.querySelector('#a')
.addEventListener('click', function(e){
    console.log(this,e); //3
});

1: setTimeout은 내부에서 콜백 함수를 호출할때 call 메서드의 첫 번째 인자에 전역객체를 넘김
> 콜백 함수 내부에서의 this가 전역객체를 가리킴
2: forEach는 4-2-5절의 '별도의 인자로 this를 받는 경우'에 해당되나,
별도의 인자로 this를 넘겨주지 않았기에 전역객체를 가리킴
3: addEventListener는 내부에서 콜백함수를 호출할때 call 메서드의 첫 번째 인자에 addEventListener메서드의 this를
그대로 넘기도록 정의돼 있음
>> 콜백 함수 내부에서의 this가 addEventListener를 호출한 주체인 HTML 엘리먼트를 가리킴

[102] 4-3 콜백 함수는 함수다

콜백 함수로 어떤 객체의 메서드를 전달하더라도 그 메서드는 메서드가 아닌 함수로서 호출됨.
예제 4-7 메서드를 콜백 함수로 전달한 경우
>> 어떤 함수의 인자에 객체의 메서드를 전달하더라도 이는 결국 메서드가 아닌 함수일 수 있기에 차이를 정확히 이해하는 것이 중요.

[103] 4-4 콜백 함수 내부의 this에 다른 값 바인딩 

Q 콜백 함수 내부에서 this가 객체를 바라보게 하고 싶을때?
A 
별도의 인자로 this를 받는 함수의 경우에는 여기에 원하는 값을 넘기면 되나, 그렇지 않은 경우에는 this의 제어권도 넘겨주게 되므로
사용자가 임의의 값을 바꿀 수 없음. 

전통적으로는 this를 다른변수에 담아 콜백 함수로 활용할 함수에서는 this 대신 그 변수를 사용하게 하고
이를 클로저로 만드는 방식이 많이 쓰였음. 




