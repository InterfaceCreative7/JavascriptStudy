chapter 4
<01>
* 제어권 
    - 호출 시점
        var count = 0;  // count 변수 선언 후 0 할당
        var timer = setInterval(function() {    //timer 변수 선언후 setInterval을 실행한 결과 할당 -> 두개의 매개변수(익명함수, 300이라는 숫자) 전달
            console.log(count);
            if (++count > 4) clearInterval(timer);
        }, 300);
        -> func에 넘겨준 함수는 매 delay마다 실행된다. 그 어떤 값도 리턴하지 않는다.
        
        var count = 0;  // count 변수 선언 후 0 할당
        var timer = setInterval(function() {    //timer 변수 선언후 setInterval을 실행한 결과 할당 -> 두개의 매개변수(익명함수, 300이라는 숫자) 전달
            console.log(count);
            if (++count > 4) clearInterval(timer);
        };
        var timer = setInterval(cbFunc, 300); 
        -> timer 변수에는 setInterval의 ID 값이 담김. cbFunc 함수는 0.3초마다 자동으로 실행됨.
            콜백 함수 내부에서는 count 값을 출력하고, count를 1만큼 증가시킨 다음, 그 값이 4보다 크면 반복 실행 종료
     => '콜백 함수의 제어권을 넘겨받은 코드는 콜백 함수 호출 시점에 대한 제어권을 갖는다.'

    - 인자
        var newArr = [10, 20, 30].map(function (currentValue, index)) { // newArr 변수를 선언 후 우항의 결과 할당 (우항은 배열 [10, 20, 30]에 map 메서드 호출)
            console.log(currentValue, index);
            return currentValue + 5 ;
        });
        console.log(newArr);    // 결과 확인

        + map 메서드는 첫번째 인자로 callback 함수를 받고, 생략 가능한 두번째 인자로 콜백 함수 내부에서 this로 인식할 대상을 특정할 수 있음.
                        메서드의 대상이 되는 배열의 모든 요소들을 처음부터 끝까지 하나씩 꺼내어 콜백 함수 반복 호출 후 함수의 실행 결과들을 모아 새로운 배열을 만든다.
                        콜백 함수의 첫번째 인자: 배열의 요소 중 현재값, 두번째 인자: 현재값의 인덱스, 세번째 인자: map 메서드의 대상이 되는 배열 자체
        + 제이쿼리의 메서드는 첫번째 인자: index, 두번째 인자: currentValue  

    - this : '콜백 함수도 함수이기 때문에 기본적으로 this가 전역객체를 참조하기만, 제어권을 넘겨받을 코드에서 콜백 함수에 별도로 this가 될 대상을 지정한 경우에는 그 대상을 참조하게 된다'      
        
* 콜백함수 : 다른 코드의 인자로 넘겨주는 함수
    -> 어떤 객체의 메서드를 전달하더라도 그 메서는 메서드가 아닌 함수로서 호출됨.
    ** 메서드를 콜백 함수로 전달한 경우
        var obj = {
            vals: [1, 2, 3],
            logValues: function(v, i) {
                console.log(this, v, i);
            }
        };
        obj.logValues(1, 2);    // obj의 logValues는 메서드로 정의됨 // {vals: [1, 2, 3], logValues: f} 1 2
        [4, 5, 6].forEach(obj.logValues);   // obj를 this로 하는 메서드를 그대로 전달한 것이 아니라 obj.logValues가 가리키는 함수만 전달
                                            // fotEach에 의해 콜백이 함수로서 호출되고 별도로 this를 지정하는 인자를 지정하지 않았으므로 함수 내부에서의 this는 전역객체를 바라보게 된다.
                                            // Window {...} 4 0
                                               Window {...} 5 1
                                               Window {...} 6 2 

                                        