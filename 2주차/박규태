- 실행 컨텍스트
실행 컨텍스트는 실행할 코드에 제공할 환경 정보들을 모아놓은 객체이다. 자바스크립트에서 실행 컨텍스트가 활성화되는 시점에서 선언된 변수를 호이스팅, 외부 환경 구성, this값 설정등의 동작을 수행한다. 
실행컨텍스트는 자바스크립트의 중요한 핵심 개념 중 하나로 매우 중요하다. 

스택 - LIFO
큐 - FIFO

싱행 컨텍스트에서는 동일한 환경에 있는 코드들을 실행할 때 필요한 환경 정보들을 모아 콜 스택에 쌓는다. 여기서 동일한 환경은 즉 하나의 실행 컨텍스트를 구성할 수 있는 방법에는 전역공간, eval()함수, 함수 등이 있다. 
여기서 우리가 주목해야 할 점은 컨텍스트에 있는 실행하고 있는 함수다.

예를 들어 실행컨텍스트 안에 이중함수가 있다고 가정해보자. 콜스택에 첫번째로 전역함수(1)가 쌓이고 두번쨰로는 바깥함수(2) 세번째로는 안에있는 함수(3)가 쌓인다. 스택의 특징으로 인해 나중에 쌓인 함수 순서로 실행이 된다. 
(전역 컨텍스트는 전체 함수가 끝나고 실행한다.) 이처럼 실행 컨텍스트는 코드를 실행하기 위한 주변환경을 수집해 저장한다. 이러한 정보들은 자바스크립트 엔진이 활용할 목적으로 생성할 뿐 개발자들은 사용할 수 없다. 
여기서 담기는 정보들은 크게 3가지로 나뉜다. 

1. VariableEnvironment: 현재 컨텍스트 내의 식별자들에 대한 정보 + 외부 환경 정보, 선언 시점의 LexicalEnvironment의 스냅샷(변경사항은 반영되지 않는다.)
2. LexicalEnvironment: 처음에는 VariableEnvironment와 똑같지만 실시간으로 변경 사항이 반영됨
3. ThisBinding: this 식별자가 바라봐여 할 대상 객체

- VariableEnvironment
VariableEnvironment에 담기는 내용은 LexicalEnvironment와 같지만 최초 실행시 스냅샷을 유지한다는 점이 다르다. 처음에는 VariableEnvironment에 정보를 담고 그대로 복사해서 LexicalEnvironment를 만든다.(주로 LexicalEnvironment을 많이 사용한다.)
초기에는 둘다 environmentRecord와 outerEnvironmentReference로 구성돼 있다. 

- LexicalEnvironment
한국어로 번역했을 때에는 주로 '어휘적 환경','정적 환경'으로 번역을 한다. 하지만 더 정확하게 맗하면은 컨텍스트를 구성하는 환경 정보들을 사전에서 접하는 느낌으로 모아놓은 것이다. 

- environmentRecord와 호이스팅
environmentRecord에는 현재 컨텍스트와 관현된 코드의 식별자 정보들이 저장된다. 컨텍스트를 구성하는 함수에 지정된 매개변수 식별자, 선언한 함수가 있을 경우 그 함수 자체, var로 선언된 변수의 식별자 등이 있다.
변수 정보를 수집하는 과정을 마쳤더라고 아직 실행되기 전의 상태이다. 자바스크립트 엔진은 이렇게 실행되기 전에도 코드의 변수명들을 이미 알고 있는 셈이다. 그래서 '자바스크립트 엔진은 식별자들을 최상단으로 끌어올려놓은 다음 실제 코드를 싱행한다'라고 해도 코드해석에는 문제가 없다. 
여기서 호이스팅이라는 개념이 등장하는데 변수 정보를 수집하는 과정을 이해하기 쉬운 방법으로 대체한 가상의 개념이다.(실제로는 끌어올리지 않지만 편의상 끌어올린 것으로 간주)

@호이스팅 규칙
호이스팅을 하는 경우는 변수 선언을 먼저 위로 끌어당긴다음 그다음 코드를 실행하는 것이다. 그래서 같은 변수명을 선언할 경우 두번째로 선언한 변수는 첫번째로 선언한 변수와 같아 초기화 된 값으로 저장된다. 
여기서 함수와 변수는 차이점이 있다. 만약 함수와 변수가 같은 변수명으로 선언될 경우 서로 다른 데이터 타입이 들어가 뒤에 선언한 타입으로 선언된다. 

@함수 선언문과 함수 표현식
함수 선언문은 function 정의부만 존재하고 병도의 할당 명령이 없는것을 의미한고, 함수 표현식은 정의한 funtion을 별도의 변수에 할당하는 것을 말한다. 
함수 선언문의 경우 별도의 함수명이 있어야 하고 함수 표현식은 없어도 된다. 그래서 일반적으로 함수 표현식을 익명 함수 표현식을 말한다. 
(함수 표현식으로 선언할 경우 함수명이 아닌 변수명으로 사용해야 한다.)

호이스팅을 할 경우 함수 선언문과 함수 표현식도 차이가 나타난다. 함수 선언문일 경우 전체를 호이스팅하는 반면에 함수 표현식을 변수 선언부만 호이스팅한다. 
여기서 함수 선언문과 함수 표현식의 극적인 차이가 나타난다. (함수 선언문을 사용할 경우 코드의 뒤에 써도 무방하지만 함수 표현식으로 사용할 경우 상관없이 써도 괜찮다.)

호이스팅할 때 가장 나중값이 먼저 할당한 값을 덮어씌운다. 그래서 함수 선언문을 사용하는것은 위험하고 상대적으로 함수 표현식이 더욱 안전하다. 
그래서 협업을 진행하는 경우 함수 선언문보다 함수 표현식이 더욱 좋다