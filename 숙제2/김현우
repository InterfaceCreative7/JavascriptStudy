1. 스코프, 스코프 체인
    스코프 체인: 식별자의 유효범위를 안에서부터 바깥으로 차례로 검색해나가는 것.
    LexicalEnvironment의 두번째 수집자료 outerEnvironmentReference는
    오직 자신이 선언된 시점의 LexicalEnvironment만을 참조하고 있어,
    가장 가까운 요소부터 차례대로만 접근할 수 있고 다른 순서로 접근하는 것은 불가하다.
    이런 구조적 특성 덕분에 여러 스코프에서 동일한 식별자를 선언할 경우,
    무조건 스코프 체인 상에서 가장 먼저 발견된 식별자에만 접근 가능하다.

    var a = 1; //scope chain example
    var outer = function(){
        var inner = function(){
            console.log(a); // undefined
            var a = 3;
        };
        inner();
        console.log(a); // 1
    };
    outer();
    console.log(a); // 1

    inner 함수 내부에서는 inner, outer, 전역 스코프 모두 접근 가능.
    outer 함수 내부에서는 outer 및 전역 스코프에서 생성된 변수만에만 접근 가능하고
    inner 스코프 내부에서 생성된 변수에는 접근x

    식별자 a는 전역공간과 inner 함수 내부에서 선언했으므로
    inner 함수 내부에서 a에 접근하려 할 때 무조건 스코프 체인 상의 첫 번째
    인자, inner 스코프 내의 LexicalEnvironment부터 검색한다.
    스코프 내에 a 식별자가 존재하므로 스코프 체인 검색은 더 이상 진행하지 않고 중단.
    즉, inner 함수 내부에서 a변수를 선언했기 때문에 동일한 이름의 a변수에 접근하지 못하게
    되는데 이를 변수 은닉화라 한다.

2. 전역 변수와 지역 변수
    전역 변수: 전역 공간에 선언한 변수
    지역 변수: 함수 내부에 선언한 변수
    코드의 안전성을 위해 전역 변수 사용 최소화

3. this
    실행 컨텍스트 활성화 당시 this가 지정되지 않은 경우 this에는 전역 객체가 저장.
    함수 호출 방법에 따라 this에 저장되는 대상이 다르다.