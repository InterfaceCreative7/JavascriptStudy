숙제 2  53이후

[53]chapter 2-3-2: 
스코프, 스코프체인,outerEnvironmentReference
스코프 scope: 식별자에 대한 유효범위

ex A외부 선언변수 > A 외부와 내부 모두 접근 가능
   A 내부 선언변수> A 내부에서만 접근 가능
ES5까지의 자바스크립트는 특이하게도 전역공간을 제외하면 오직 함수에 의해서만 스코프가 생성됨.

스코프 체인 : '식별자의 유효범위'를 안에서부터 바깥으로 차례로 검색해나가는 것
스코프 체인을 가능하게 하는 것이 바로 LexicalEnvironment의 두 번째 수집 자료인 outerEnvironmentReference임

[53] 스코프 체인
outerEnvironmentReference는 현재 호출된 함수가 선언될 당시의 LexicalEnvironment를 참조함.
'선언'행위가 실제로 일어나는 시점: 콜 스택 상에서 어떤 실행 컨텍스트가 활성화된 상태일 때뿐임.
어떤 함수를 선언(정의)하는 행위 자체도 하나의 코드에 지나지 않으며, 모든 코드는 실행 컨텍스트가 활성화 상태일 떄 실행되기 때문.

구조적 특성 때문에 여러 스코프에서 동일한 식별자를 선언한 경우, 무조건 스코프 체인 상에서 가장 먼저 발견된 식별자에만 접근 가능함.

[54]예제 2-13 스코프 체인
// 1 전역 컨텍스트 활성화
// 2 전역 컨텍스트의 environmentRecord에 {a, outer} 식별자 저장
전역 컨텍스트는 선언 시점이 없음>> 전역 컨텍스트outerEnvironment-Reference에 아무것도 안담김
(this : 전역 객체)
var a = 1; 변수 a in 전역 스코프에 1을, outer에 함수 할당
var outer = function(){ 
//4 outer 실행컨텍스트의 environmentRecord에 inner 식별자 저장
outerEnvironmentReference에 outer함수가 선언될 당시의 LexicalEnvironment가 담김.
outer함수는 전역 공간에서 선언됐으므로 전역 컨텍스트의 LexicalEnvironment를 참조복사함.
이를 [GLOBAL, {a, outer} ]라고 표기. 첫 번째는 실행 컨텍슽의 이름, 두 번째는 environmentRecord객체임.
(this: 전역 객체) 
    var inner = function(){ 
        
        //5 outer 스코프에 있는 변수 inner함수 할당
          7 inner 실행 컨텍스트의 environmentRecord에 {a}식별자 저장
         outerEnvironmentReference에는 inner함수가 선언될 당시의 LexicalEnvironment가 담김
         inner함수는 outer함수 내부에서 선언됨>> outer 함수의 LexicalEnvironment(= [outer, {inner}])를 참조복사.
         (this : 전역 객체)

        console.log(a); 8 식별자 a에 접근.
        현재 활성화 상태인 inner 컨텍스트의 environmentRecord에서 a를 검색
        a가 발견됐는데 여기에는 아직 할당된 값이 없음(undefined 출력)

        var a = 3; 9 inner 스코프에 있는 변수 a에 3할당


    }; 10 inner함수 실행 종료. inner 실행 컨텍스트가 콜 스텍에서 제거,
    바로 아래의 outer실행 컨텍스트가 다시 활성화, 교재 내 7번째 줄 다음으로 이동

    inner();
    
    // 6 inner함수 호출>> outer 실행 컨텍스트의 코드는 7번째 줄에서 임시중단.
    inner 실행 컩텍스트가 활성화되어 3번째 줄로 이동.
    
    console.log(a); 11 식별자 a에 접근. 이때 js엔진은 활성화된 실행 컨텍스트의 LexicalEnvironment에 접근.
    첫요소의 environmentRecord에서 a가 있는지 찾아보고, 없으면 outerEnvironmentReference에 있는 environmentRecord로
    넘어가는 식으로 계속해서 검색. 예제에서는 전역 LexicalEnvironment에 a가 있으므로 그 a에 저장된 값 1 반환

}; 12: outer 함수 실행 종료. outer 실행 컨텍스트가 콜 스택에서 제거, 바로 아래의 전역 컨텍스트가 다시 활성화
앞서 중단했던 10번째 줄의 다음으로 이동.
outer(); 

//3 outer 함수 호출, 전역 컨텍스트의 코드는 10번쨰 줄에서 임시중단.
outer 실행 컨텍스트가 활성화되어 2번째 줄로 이동
>> 전역 컨텍스트의 코드는 10번째 줄에서 임시중단, outer

console.log(a); 13: 실별자 a에 접근하고자 함. 현재 활성화 상태인 전역 
컨텍스트의 environmentRecord에서 a를 검색.>> 바로 a 탐색 가능.(1 출력)
모든 코드 실행 완료. 전역 컨텍스트가 콜 스택에서 제거되고 종료.

[57] : 표 2-1 스코프 체인
전역 컨텍스트 - outer 컨텍스트 - inner 컨텍스트 
순으로 점차 규모가 작아지는 반면 스코프 체인을 타고 접근 간으한 변수의 수는 늘어남.
전역 공간에서는 전역 스코프에서 생성된 변수에만 접근 가능함.
outer 함수 내부에서 outer 및 전역 스코프에서 생성된 변수에 접근할 수 있지만 
inner 스코프 내부에서 생성된 변수에는 접근하지 못함.
inner 함수 내부에서는 inner, outer, 전역 스코프 모두에 접근 가능. 

[58] 변수 은닉화
스코프 체인 상에 있는 변수라고 해서 무조건 접근 가능은 아님.
inner 함수 내부에서 a 변수를 선언해야 전역 공간에서 선언한 동일한 이름의 a 변수에는 접근할 수 었음.

[62] 전역변수와 지역변수
전역 공간에서 선언한 변수: 전역변수
함수 내부에서 선언한 변수: 지역변수

코드의 안전성을 위해 가급적 전역변수 사용을 최소화해야함.

[63] 04 - this
 
 실행 컨텍스트의 thisBinding에는 this 로 지정된 객체가 저장됨.
 실행 컨텍스트 활성화 당시 this 지정이 안된 경우: this에 전역 객체가 저장됨.
 그밖에 함수를 호출하는 방법에 따라 this에 저장되는 대상이 다름.

 [63] 05 - chapter 2 Summary

 1 실행 컨텍스트: 실행할 코드에 제공할 환경 정보들을 모아놓은 객체
 ㄴ 전역 컨텍스트: 전역 공간에서 자동으로 생성
 ㄴ eval 및 함수 실행에 의한 컨텍스트 등.
 실행 컨텍스트 객체는 활성화되는 시점에 VariableEnvironment, LexicalEnvironment, ThisBinding 세가지 정보 수집

 2 실행컨텍스트 생성시
 VariableEnvironment와 LexicalEnvironment가 동일한 내용으로 구성
 LexicalEnvironment는 함수 실행 도중에 변경되는 사항이 즉시 반영
 VariableEnvironment는 초기상태 유지. 
VariableEnvironment,LexicalEnvironment는 매개변수명, 변수의 식별자, 선언한 함수의 함수명 등을 수집 하는 
environmentRecord와 바로 직전 컨텍스트의 LexicalEnvironment 정보를 참조하는 outerEnvironmentReference로 구성돼 있음

3 호이스팅은 코드 해석을 좀 더 수월하게 하기 위해 environmentRecord의 수집과정을 추상화한 개념
실행 컨텍스트가 관여하는 코드 집단의 최상단으로 이들을 '끌어올린다'고 해석
변수 선언과 값 할당이 동시에 이뤄진 문장은 '선언부'만을 호이스팅,
할당 과정은 원래 자리에 남아있게 됨, >>  함수 선언문과 함수 표현식의 차이 발생

4 스코프는 변수의 유효범위.
outerEnvironmentReference는 해당 함수가 선언된 위치의 LexicalEnvironment를 참조
코드 상에서 어떤 변수에 접근하려고 하면 현재 컨텍스트의 LexicalEnvironment를 탐색해서 발견되는 그 값을 반환
발견하지 못할 경우 다시 outerEnvironmentReference에 담긴 LexicalEnvironment를 탐색하ㅡㄴ 과정을 거침
전역 컨텍스트의 LexicalEnvironment까지 탐색해도 해당 변수를 찾지 못하면 undefined 반환

5 전역 컨텍스트의 LexicalEnvironment에 담긴 변수를 전역변수라함
그 밖의 함수에 의해 생성된 실행 컨텍스트의 변수들은 모두 지역변수
안전한 코드 구성을 위해 가급적 전역변수 사용을 최소화하기

this에는 실행 컨텍스트를 활성화하는 당시 지정된 this 저장
함수를 호출하는 방법에 따라 그 값이 달라지며, 지정되지 않은 경우에는 전역 객체 저장. 