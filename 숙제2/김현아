* 스코프, 스코프 체인
    - 스코프 : 식별자에 대한 유효범위 (오직 함수에 의해서만 생성됨)
        + 어떤 경계 A의 외부에서 선언한 변수는 A의 외부, 내부 접근 가능/ A의 내부에서 선언한 변수는 내부에서만 접근 가능 
    - 스코프 체인 : 식별자의 유효범위를 안에서부터 바깥으로 차례로 검색
        + 여러 스코프에서 동일한 식별자를 선언한 경우에는 '무조건 스코프 체인 상에서 가장 먼저 발견된 식별자에게만 접근 가능'

    # var a = 1;    // 전역 컨텍스트 활성화
    # var outer = function ()  // 전역 스코프에 있는 변수 a : 1, outer : 함수 할당
    #   {
    #       var inner = function () // outer 스코프에 있는 변수 inner : 함수 할당 (inner 실행 컨텍스의 environmentRecord에 a 식별자 저장)
    #       {
    #           console.log(a); // 식별자 a에 접근 (undefined 출력)
    #           var a = 3;  // inner 스코프에 있는 변수 a : 3 할당
    #       };  //inner 함수 실행 종료 -> inner 실행 컨텍스트가 콜 스택에서 제거, outer 실행 컨텍스트 다시 활성화
    #   inner ();   // inner 함수 호출 -> outer 실행 컨텍스트 코드 임시중단 -> inner 실행 컨텍스트 활성화
    #   console.log(a); // 식별자 a에 접근, 활성화된 실행 컨텍스트의 LexicalEnvironment에 접근 후 a 검색 -> a 있으면 저장된 값 반환 (1 출력)
    #   }; // outer 함수 실행 종료 -> outer 실행 컨텍스트가 콜 스택에서 제거, 전역 컨텍스트 다시 활성화
    # outer();  // outer 함수 호출 -> outer 실행 컨텍스트가 활성화되어 2번째줄로 이동
    # console.log(a); // 식별자 a에 접근, 전역 컨텍스트의 environmentRecord에서 a 검색 -> a 값 반환 (1 출력) -> 전역 컨텍스트가 콜 스택에서 제거 & 종료
    
    + 변수 은닉화 : inner에서 a 변수를 선언하면 전역 공간에서 선언한 동일한 이름의 a 변수에는 접근할 수 없다.

* 전역변수와 지역변수
    - 전역변수 : 전역 공간에서 선언한 변수
    - 지역변수 : 함수 내부에서 선언한 변수
    + 함수 선언문 < 함수 표현식 < 지역변수
    + 가급적 전역변수 사용을 최소화 