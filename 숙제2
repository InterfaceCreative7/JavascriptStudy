2주차 숙제

스코프: 식별자에 대한 유효범위 (경계의 외부에서 선언한 변수는 외부뿐아니라 내부에서도 접근이 가능하지만 내부에서 선언한 변수는 오직 내부에서만! 접근가능)
스코프 체인: 식별자 유효범위를 안에서부터 바끝으로 차례로 검색해 나가는 것 -> 이를 가능하게 하는 것이 LexicalEnvironment의 두 번째 수집자료인 outerEnvironmentReference
*자바스크립트는 역공간을 제외하면 오직 함수에 의해서만 스코프가 생성된다.

outerEnvironmentReference은 현재 호출된 함수가 선언될 당시의 LexicalEnvironment를 참조하는데 선언하다, 라는 행위가 실제 일어날 수 있는 시점이란 콜스택상에서 어ᄄᅠᆫ 실행 컨텍스트가 활성화된 상태일 뿐 어떤 함수를 정의하는 행위 자체도 하나의 코드에 지나지 않으며, 모든 코드는 실행컨텍스트가 활성화 상태일 때 실행!

outerEnvironmentReference는 연결리스트의 상태를 띈다 => 선언된 함수의 바로 상위에 있는 함수의 LexicalEnvironment를 따르고 이 때문에 가장 가까운 요소를 차례대로 접근하고 다른 순서로 접근하는 것이 불가능하다. ** 무조건 스코프 체인상에사 가장 먼저 발견된 식별자에게만 접근이 가능하다.

스코프 체인은 전역컨텍스트 -> outer 컨텍스트 -> inner 컨텍스트 순으로 규모가 작아지지만 스코프 체인을 타고 접근 가능한 변수의 수는 늘어난다.

상위에 있는 함수에서만 영향을 받는 연결리스트의 형태를 띄기 때문에 inner 스코프 내부에서 생성된 변수에는 접근하지 못한다.
*inner 스코프 내부에서는 outer 스코프와 전역스코프 모두에 접근할 수 있다.

하지만 무조건 스코프 체인상에 있는 변수 모두를 접근할 수 있는 것은 아니다.

선언하려는 변수가 전 함수에 이미 사용되었다면 함수의 내부에서 변수에게 접근하려고 할 때 무조건 스코프 상의 전 함수부터 검색할 수 밖에 없기 때문에 상위 함수에 변수가 존재하므로 더 이상 진행하지 않기 때문에 전역 공간에서 선언한 변수에는 더 이상 접근할 수 없게 된다.
==> 이런 현상을 변수 은닉화라고 한다.

전역변수: 전역 스코프에서 선언한 a와outer 둘
지역변수: outer 함수내부에서 선언한 inner와 inner 함수 내에서 선언한 a둘
코드의 안전성을 위해 가급적 전역변수 사용을 최소화하는 것이 좋다.

실행 컨텍스트 활성화 당시에 this가 지정되지 않은 경우 this 에는 전역 객체가 저장된다.
-> 함수를 호출하는 방법에 따라 this 에 저장되는 대상이 다르다.

