1. 기본형과 참조형 데이터의 복사 비교
    var a = 10;
    var b = a;

    var obj1 = {c:10, d: 'ddd'};
    var obj2 = obj1;

    복사 과정은 동일하지만 데이터 할당과정에서 차이가 있기 때문에
    복사 이후의 동작에 큰 차이가 발생한다.

    위의 코드에,
    b = 15;
    obj2.c = 20;
    
    추가했을 경우 a와 b의 값이 달라지지만 obj1과 obj2의 값은 같은 객체를 바라보고 있다.
    기본형은 주솟값을 복사하는 과정을 한 번 이루어지지만 참조형은 한 단계를 더 거치게 된다.

    obj2.c = 20
    이 아닌
    obj2 = {c:20, d: 'ddd'};
    인 경우 새로운 공간에 새 객체가 저장되고 그 주소를 obj2 위치에 저장하게 돼 위의 경우와 차이가 있다.

    참조형 데이터가 가변값이라고 설명할 때의 가변은 데이터 자체가 아닌 그 내부 프로퍼티를
    변경할 때만 성립한다.

2. 불변 객체
    2-1. 불변 객체를 만드는 법
        불변 객체는 값으로 전달받은 객체에 변경을 해도 원본 객체는 변하지 않아야 되는 경우 필요하다.

        새로운 객체를 할당하는 경우 사용자가 입력해야 하는 수고가 늘어나게 되므로 객체 프로퍼티
        개수에 상관 없이 모든 프로퍼티를 복사해 새로운 객체를 반환하는 함수를 '얕은 함수'라 한다.

        var copyobject = function (target){ //얕은 함수의 예
            var result ={};
            for (var prop in target){
                result [prop] = target[prop];
            }
            return result;

        };
    2-2. 얕은 복사와 깊은 복사
        얕은 복사는 바로 아래 단계의 값만 복사하는 방법이고
        깊은 복사는 내부의 모든 값들을 하나하나 찾아 전부 복사하는 방법이다.

        얕은 복사의 경우 중첩된 객체에서 참조형 데이터가 저장된 프로퍼티를 복사할 때 그 주솟값만 복사한다는
        것이다. 그렇게 되면 원본과 사본이 동일한 참조형 데이터의 주소를 가리키게 돼 사본을 바꾸면
        원본도 바뀌게 된다.

        var user = {
            name:'aa',
            urls:{
                blog: 'aaa'
            }
        };

        var user2 = copyobject(user);

        user2.urls.blog = '';
        console.log(user.urls.blog === user2.urls.blog); // ture

        이런 현상이 발생하지 않게 하기 위해서는 user.urls 프로퍼티에 대해서도 불변 객체로 만들어야 한다.

        var user2 = copyobject(user);
        user2.urls = copyobject(user.urls);

        var copyobjectdeep = function(target){//깊은 복사 범용 함수
            var result = {};
            if (typeof target === 'object' && target !== null){
                for (var prop in target){
                    result[prop] = copyobjectdeep(target[prop]);
                }
            }
            else{
                result = target;
            }
            return result;
        }
        깊은 복사를 처리하는 다른 방법으로는 객체를 JSON 문법으로 표현된 문자열로 전환 후
        다시 JSON객체로 바꾸는 것이다. 다만 메서드나 숨겨진 프로퍼티들은 무시한다.
        httpRequest로 받은 데이터를 저장한 객체를 복사할 때 등 순수한 정보만 다룰 때 활용하기 좋다.

        var copyobjectviaJSON = function (target){
            return JSON.parse(JSON.stringify(target));
        }
    3. undefined와 null
        undefined와 null은 둘다 없음을 나타내는 값이지만 미세하게 다르고 목적 또한 다르다.

        undefined는 사용자가 명시적으로 지정할 수 있지만 값이 존재하지 않을 때 자바스크립트 엔진이
        자동으로 부여하는 경우도 있다.
        (1) 값을 대입하지 않은 변수, 즉 데이터 영역의 메모리 주소를 지정하지 않은 식별자에 접근할 때
        (2) 객체 내부의 존재하지 않는 프로퍼티에 접근하려 할 때
        (3) return 문이 없거나 호출되지 않는 함수의 실행결과

        배열의 경우 값을 대입하지 않은 경우 undefined가 아닌 empty로 어떤 값도 할당되지 않는다.
        비어있는 요소는 순회와 관련된 많은 배열 메서드들의 순회 대상에서 제외된다.
        
        비어있음을 명시적으로 나타내고 싶을 때 undefined가 아닌 null을 사용한다.
        undefined는 대입하는 것이 아닌 엔진이 자동으로 부여하게 두는 것이 좋다.
        null의 타입은 object이므로 null인지 판별하기 위해서는 동등연산자(==)가 아닌
        일치 연산자(===)를 써야 정확히 판별할 수 있다.

        var n = null;
        console.log(n == undefined) // true
        console.log(n == null) // ture
        console.log(n === undefined) // false
        console.log(n === null) // ture



