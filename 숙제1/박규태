- 변수 복사 비교
기본형 데이터와 참조형 데이터의 차이를 비교해보자 일단 변수를 복사하는 과정은 기본형 데이터와 참조형 데이터 모두 같은 방법을 사용하고 있다. 
복사 과정은 동일하지만 데이터 할당 과정이 다르기 때문에 복사 이후 동작에 큰차이가 있다. 만약 복사를 한 후 수정을 할 경우 기본형 데이터는 서로 다른 주소가 되고 참조형 데이터는 같은 주소가 된다.
즉, 참조형 데이터는 값이 달라지지 않는다. 하지만 참조형 데이터에도 아예 새로운 값을 넣는다면 주소를 다르게 지정한다. 

- 불변 객체
참조형 데이터, 기본형 데이터 모두 데이터 자체를 변경할 때는(새로운 데이터 할당)에는 기존데이터가 변하지 않는다. 참조형 데이터 중 객체를 새롭게 재할당하거나 새롭게 객체를 만드는 도구를 사용한다면 불변객체를 만들 수 있다.
그렇다면 불변객체는 어떤 상황에서 필요할까? 바로 값으로 전달받은 객체에 변경을 가하더라도 원본 객체는 변하지 않아야 하는 경우에 필요하다. 
여기서 불변객체를 만들기 위해 복사하는 방법으로 2가지가 있다. 

- 얕은 복사와 깊은 복사
1. 얕은 복사: 바로 아래 단께의 값만 복사하는 방법 (얕은 복사를 지키기 위해서는 팀원들 간의 합의와 규칙이 있다. 하지만 합의와 규칙으로만 지키기는 어려워 시스템 적으로 제약을 거는 편이 안전하다.)
중첩된 객체에서 챔조형 데이터가 저장된 프로퍼티를 복사할 때 주솟값만 복사한다. 이렇게 된다면 해당 프로퍼티의 원본을 바꾸면 사본이 바뀐다. 

2. 깊은 복사: 내부의 모든 값들을 하나하나 찾아서 전부 복사하는 방법(얕은 복사를 재귀적으로 실행하는것 즉, 객체안에 객체를 모두 새롭게 복사하는 것)
쉽게 하는 방법으로는 JSON문법으로 표현된 문자열로 바꾼다음 다시 JSON문법으로 표현된 객체로 변환하는 것이다. 

- undefined와 null
undefined: 사용자가 명시적으로 지정할 수 있으며 값이 존재하지 않을 때 자바스크립트 엔진이 자동으로 부여할 수 있다. 

자바스크립트 엔진이 자동으로 부여할 때에는 3가지 경우가 있다. 
1. 값을 대입하지 않는 변수, 즉 데이터 영역의 메모리 주소를 지정하지 않은 식별자에 지정할 때
2. 객체 내부의 존재하지 않는 프로퍼티에 접근하려 할때
3. return문이 없거나 호출되지 않는 함수의 실행 결과일 때 
undefined를 할당한 요소와 비어있는 요소는 다르며 비어있는 요소는 순회와 관련된 많은 배열 메서드들의 순회 대상에서 제외된다. (배열 함수인 forEach, map, filter, reduce에서 비어있는 요소 건너뜀)
즉, 값이 지정되지 않은 인덱스는 아직 존재하지 않는 프로퍼티에 지나지 않는다. 
사용자가 지정한 undefined와 엔진에서 지정한 undefined는 차이를 가진다. 사용자가 지정한 것은 실존하는 데이터인 반면, 자바스크립트 엔진이 지정한 undefined는 문자 그대로 없음을 나타낸다. 

이러한 undefined는 우리가 개발할 때 혼란을 야기할 수 있다. 그래서 우리는 undefined를 직접 지정하기 보다는 그와 같은 null값으로 지정해주면 된다. null을 사용할 때에는 주의해야 할점이 있는데 typeof를 쓸경우 object로 나오는 경우다.

