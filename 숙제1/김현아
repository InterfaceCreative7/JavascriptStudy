* 기본형 데이터와 참조형 데이터의 차이
	** 변수 복사 비교
	- 기본형 데이터
	# var a = 10; // 빈 공간에 식별자 a 지정 -> 숫자 10 빈 공간에 저장 -> a의 값에 10의 주소 할당
	# var b = a; // 빈 공간에 식별자 b 지정 -> 식별자 a 검색 후 값 찾아오기 -> a의 주소에 저장된 값의 주소를 대입
		
	- 참조형 데이터
	# var abj1 = { c : 10, d : 'ddd' }; 
		// 빈 공간에 식별자 obj1 지정 -> 데이터 영역의 빈 공간 확보 & 별도의 변수 영역 확보 후 주소 저장 
			-> 식별자 c, d 지정 -> c에는 10의 주소값 할당 & 빈 공간에 'ddd' 저장 후 주소 d에 할당
	# var obj2 = obj1; // 빈 공간에 식별자 obj2 지정 -> 식별자 obj1 검색 후 그 값의 주소에 대입 

    + 복사 과정은 동일하지만 데이터 할당 과정에서 차이가 있다 -> 변수 복사 이후 동작에도 큰 차이 발생

    ** 변수 복사 비교 후 값 변경 결과 비교 (1) - 객체의 프로퍼티 변경 시
    # var a = 10;
	# var b = a;
	# var obj1 = { c : 10, d : 'ddd' }; 
	# var obj2 = obj1;

    # b = 15; // 숫자 15 빈 공간에 저장 -> 식별자 b의 주소에 숫자 15의 주소 저장 
    # obj2.c = 20; 숫자 20 데이터 영역의 빈 공간에 저장 -> 변수 영역에서 obj2의 주소를 찾고 obj2의 값이 가리키는 변수 영역에서 c를 찾아 그 곳에 숫자 20의 주소 대입

    ** 변수 복사 비교 후 값 변경했을 떄의 차이점 - 객체의 프로퍼티 변경 시
    - 기본형 데이터의 경우 : 변수 b의 값 변경 -> 값이 바뀜
    - 참조형 데이터의 경우 : 변수 obj2의 프로퍼티 값 변경 -> 값은 바뀌지 않음
        + 변수 a,b는 서로 다른 주소를 바라보지만 변수 obj1,obj2는 여전히 같은 객체를 바라봄.
          => a != b / obj1 ==obj2

    ** 변수 복사 비교 후 값 변경 결과 비교 (2) - 객체 자체를 변경 시
    # var a = 10;
	# var b = a;
	# var obj1 = { c : 10, d : 'ddd' }; 
	# var obj2 = obj1;

    # b = 15; 
    # obj2.c = { c : 20, d : 'ddd' }; // 객체 직접 변경 (=> 메모리의 데이터 영역의 새로운 공간에 새 객체가 저장되고 그 주소를 변수 영역의 obj2 위치에 저장)

<05>
* 불변 객체 -> 값으로 전달받은 객체에 변경을 가하더라도 원본 객체는 변하지 않아야 하는 경우 필요

    ** 객체의 가변성에 따른 문제점 해결 예시 
        var user = { name: 'Jaenam', gender: 'male'}; // user의 객체 생성
        
        var changeName = function (user, newName) 
        { 
            return {
                name: newName,
                gender: user.gender
            }; // changeName 함수가 새로운 객체를 반환하도록 한다.
        };
        
        var user2 = changeName(user, 'Jung'); // user와 user2는 서로 다른 객체 이므로 비교 가능
        
        if (user !== user2) 
        {
            console.log('유저 정보가 변경되었습니다.'); // 변경됨
        };
        console.log(user.name, user2.name); // Jaenam Jung
        console.log(user === user2); // false

    **기존 정보를 복사해서 새로운 객체를 반환하는 함수 (얕은 복사)
        var user = { name: 'Jaenam', gender: 'male'}; // user의 객체 생성
        
        var user2 = copyObjectz(user);
        user2.name = 'Jung'; // user와 user2는 서로 다른 객체 이므로 비교 가능
        
        if (user !== user2) 
        {
            console.log('유저 정보가 변경되었습니다.'); // 변경됨
        };
        console.log(user.name, user2.name); // Jaenam Jung
        console.log(user === user2); // false
        
            + copyObject : for in 문법을 이용하여 result 객체에 target 객체의 프로퍼티를 복사     
            # var copyObject = function (target){
            #   var result = {};
            #   for (var prop in target) { result[prop] = target[prop]; }
            #   return result;
            # };

* 얕은 복사와 깊은 복사
    - 얕은 복사 : 바로 아래 단계의 값만 복사하는 방법
        -> 사본을 바꾸면 원본도 바뀌고 원본이 바뀌면 사본도 바뀐다.
    - 깊은 복사 : 내부의 모든 값들을 하나하나 찾아서 전부 복사하는 방법 
        -> 참조형 데이터의 경우 다시 그 내부의 영역을 복사해야하므로 '재귀적으로' 수행해야함
        -JSON을 활용하여 간단히 깊은 복사를 처리할 수 있다.

<06>
* undefined 와 null : '없음'을 나타내는 값
    - undefined 
     1. 사용자가 명시적으로 지정 '-> undefined 그 자체로 값 & 순회의 대상이 될 수 있음'
     2. 값이 존재하지 않을 때 자동으로 부여 '-> 해당 프로퍼티나 배열의 키값이 존재하지 않음 즉, 값이 없음'
        (1) 데이터 영역의 메모리 주소를 지정하지 않은 식별자에 접근할 때
        (2) 객체 내부의 존재하지 않는 프로퍼티에 접근하려고 할 때
        (3) return 문이 없거나 호출되지 않는 함수의 실행 결과

        var a;
        console.log(a); // (1) 값을 대입하지 않은 변수에 접근

        var obj = { a: 1};
        console.log(obj.a);
        console.log(obj.b); // (2) 존재하지 않는 프로퍼티에 접근
        console.log(b);

        var func = function() {};
        var c = func(); // (3) return 값이 없으면 undefined를 반환한 것으로 간주
        console.log(c);

     - null : '비어있음'을 명시적으로 나타내고 싶을 때 사용
        + 주의 + typeof null이 object (-> 버그)
        
     + undefined와 null은 동등 연산자(==)가 아닌 일치 연산자(===)으로 정확히 판별가능