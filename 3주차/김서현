STUDY 3RD WEEK
[65] Chapter 3 - this

intro
대부분의 객체지향 언어에서 this는 클래스로 생성한 인스턴스 객체를 의미
JS : this 는 어디서든 사용 가능
햠수와 객체(메서드)의 구분이 느슨한 js에서는 this 실질적으로 이 둘을 구분하는 거의 유일한 기능

[65] 3-1 : 상황에 따라 달라지는 this
js에서 this는 기본적으로 실해 컨텍스트가 생성될 때 함께 결정됨.
this는 함수를 호출할 때 결정됨. 함수를 어떤 방식으로 호출하느냐에 따라 값이 달라짐.
[66] 3-1-1 전역공간에서의 this

전역 공간에서 this는 전역 객체를 가리킴, 개념상 전역 컨텍스트를 생성하는 주체 = 전역 객체
*js런타임 환경에 따라 다른 이름과 정보를 가지는 전역 객체
브라우저 환경 : window,  Node.js : global

EX 3-3 : 전역변수와 전역객체(1)
var a = 1;
console.log(a);// 1
console.log(window.a);// 1 
console.log(this.a);// 1
window.a 와 this.a에 모두 1이 출력됨.
?? 전역공간에서 this는 전역객체를 의미하므로 두 값이 같은 값을 출력하는 것은 당연하나 왜 1을 출력?
ㄴ 자바스크립트의 모든 변수는 실은 특정객체의 프로퍼티로서 동작하기 때문.
 사용자가 var 연산자를 이용해 변수를 선언하더라도, js엔진은 어떤 특정 객체의 프로퍼티로서 인식.
 특정객체 = 실행 컨텍스트의 L.E, 실행 컨텍스트는 변수를 수집해서 L.E의 프로퍼티로 저장.
 이후 어떤 변수 호출 >> L.E 조회>> 일치하는 프로퍼티 존재 >> 값 반환
 전역 컨텍스트 : L.E는 그대로 전역객체 참조. 
 >> '전역변수를 선언하면 자바스크립트 엔진은 이를 전역객체의 프로퍼티로 할당한다.'

 ?? a를 호출하였는데 1이 출력되는 이유?
 ㄴ 변수 a에 접근 시도>> 스코프 체인 : a 검색하다가 가장 마지막에 도달하는 전역 스코프의 L.E에서 해당 프로퍼티 a 발견
 >>그 값 반환         // 단순하게 (window.)이 생략된 것이라도 봐도 됨.
 //전역 공간에서는 window 프로퍼티에 직접 할당 = var 변수 선언 (동작이 같음)


 * [68] 전역변수 선언과 젼역객체의 프로퍼티 할당사이 전혀 다른경우 - '삭제'명령
       사용자가 의도치않게 삭제하는 것을 방지하는 나름의 방어 전략
  ㄴ 전역변수를 선언하면 js엔진이 이를 자동으로 전역객체의 프로퍼티로 할당하면서 추가적으로 해당 프로퍼티의 configurable 속성(변경 및 삭제 가능성)을 false로 정의함

[68] 예제 3-5 : 전역변수와 전역객체(3)

// 전역변수로 선언한 경우 : 삭제가 안됨
var a = 1;
delete window a; // false
console.log(a, window.a, this. a);/ 1 1 1

var b= 2;
delete b; // false
console.log(b, window.b, this.b);// 2 2 2

// 전역객체의 프로퍼티로 할당한 경우 : 삭제

window.c = 3;
delete window.c; // true
console.log(c, window.c, this.c); // Uncaught ReferenceError: c is not defined 

window.d = 4;
delete d; //true
console.log(d, window.d, this.d);// Uncaught ReferenceError: d is not defined.

>> var로 선언한 전역변수와 전역객체의 프로퍼티의 차이 : 호이스팅 여부 및 configurable 여부

[69] 3-1-2 메서드로서 호출할 떄 그 메서드 내부에서의 this

어떤 함수를 실행하는 방법 : 1 함수로 호출하는 경우, 2 메서드로서 호출하는 경우
ㄴ 함수와 메서드는 미리 정의한 동작을 수행하는 코드 뭉치

'독립성'에서 차이남
ㄴ 함수: 그자체로 독립적인 기능 수행
ㄴ 메서드: 자신을 호출한 대상객체에 관한 동작 수행
JS는 상황별로 this 키워드에 다른 값을 부여해 이를 구현함.

* 어떤 함수를 개체의 프로퍼티에 할당한다고 해서 그 자체로서 무조건 메서드가 되는 것이 아님
객체의 메서드로서 호출할 경우에만 메서드로 동작, 그렇지 않으면 함수로 동작.

[70] 예제 3-6 함수로서 호출, 메서드로서 호출

var func = function(x){ //변수에 익명함수 할당
    console.log(this,x);
};
func (1); //Window{...} 1 , func 호출 >> this로 전역객체 Window 출력

var obj = {// 객체할당, 그 객체의 method 프로퍼티에 앞에서 만든 func 함수 할당.
    method: func
};
obj.method(2); //{method:f} 2, obj의 method 호출 >> this가 obj라 출력.

>> 원래의 익명함수는 그대로지만 !
변수에 담아 호출한 경우 & obj 객체의 프로퍼티에 할당해서 호출한 경우에 따라 this 가 달라짐

* Q '함수로서 호출'과 '메서드로서의 호출'을 어떻게 구분할까?
  A 함수 앞에 점(.) 여부로 구분 
  ㄴ . 없음 : 함수로 호출
     . 있음, 대괄호 표기법 : 메서드로서 호출

[71]예제 3-7 메서드로서 호출 - 점 표기법, 대괄호 표기법
var obj = {
    method: function(x){console.log(this.x);}
};
obj.method(1); //{ method:f } 1
obj['method'](2); //{method: f} 2
>> 어떤 함수를 호출할 때 그 함수 이름(프로퍼티 명) 앞에 객체가 명시돼 있는 경우: 메서드로 호출
그 외: 함수로 호출

[71] 메서드 내부에서의 this
this에는 호출한 주체에 대한 정보가 담김
어떤 함수를 메서드로서 호출하는 경우: 호출 주체는 바로 함수명(프로퍼티명)앞의 객체
점 표기법 : 마지막 점 앞에 명시된 객체 

[72] 3-1-3 함수로서 호출할 떄 그 함수 내부에서의 this
[72] 함수 내부에서의 this
어떤 함수를 함수로서 호출하는 것은 호출 주체를 명시하지 않고 개발자가 코드에 직접 관아ㅕ해 실행한것이기에 호추 주체의 정보를 알 수 없음
실행 컨텍스트를 활성화할 당시 this가 지정되지 않은 경우 this는 전역 객체를 바라봄.
>> 함수에서의 this는 전역 객체를 가리킴.  !! 설계상의 오류

[72] 메서드의 내부함수에서의 this
'설계상의 오류'로 인해 this는 실제 동작가 다르게 예측됨.
내부함수를 함수로서 호출했는지 메서드로서 호출했는지만 파악하면 this 값 정확히 예측 가능

[72] 예제 3-9 내부함수에서의 this

var obj1 = { // 1 : 객체 생성, 이 객체 내부에 outer 프로퍼티 존재-익명함수 연결, 이렇게 생성된 객체를 변수 obj1에 할당
    outer: function(){// 3: obj1.outer함수의 실행 컨텍스트가 생성, 호이스팅, 스코프 체인 정보 수집,
    this 바인딩. 이 함수를 호출할 떄 함수명인 outer앞 . 이 있었으므로 메서드로서 호출한 것. 
    따라서 this에는 마지막 점 앞의 객체인 obj1이 바인딩
        console.log(this); //(1) /4 obj1 객체 정보 출력
        var innerFunc = function(){ // 5 호이스팅 된 변수 innerFunc는 outer 스코프 내에서만 접근 가능한 지역변수
        이 지역변수에 익명 함수 할당 
        / 7 innerFunc 함수의 실행 컨텍스트가 생성되면서 호이스팅, 스코프 체인 수집, this 바인딩 등을 수행
          이 함수를 호출할 때 함수명 앞에는 . 이 었었음. 즉 함수로서 호출한 것이므로 this가 지정되지 않았고, 
          따라서 자동으로 스코프 체인상의 최상위 객체인 전역객체(Window)가 바인딩 됨
            console.log(this); //(2), (3)/ 8 Window 객체 정보 출력
        }
        innerFunc(); //6  innerFunc 호출/ + i

        var obj2 = { 9 호이스팅 된 변수 obj2 역시 outer 스코프 내에서만 접근할 수 있는 지역변수. 여기에 다시 객체 할당
        그 객체에는 innerMethod라는 프로퍼티가 있으며, 여기에 앞서 정의된 변수 innerFunc와 연결된 익명 함수가 연결됨.
            innerMethod: innerFunc // 12 obj2 객체 정보가 출력됨 
            /11 obj2.innerMethod 함수의 실행 컨텍스트가 생성. 
            이 함수를 호출할 때 함수명인 innerMethod 앞에 . 이 있었으므로 메서드로서 호출한 것임.
            따라서 this에는 마지막 점 앞의 객체인 obj2가 바인딩됨
        
        };
        obj2.innerMethod(); //10 obj2.innerMethod 호출 / + ii
    

    }
};
obj1.outer(); // 2 : obj1.outer 호출

i 는 outer 메서드 내부에 있는 함수(innerFunc)를 함수로서 호출함
ii는 같은 함수 (innerFunc)를 메서드로서 호출함
>> 같은 함수임에도 바인딩되는 this 가 다름 
this 바인딩에 관해서는 오직 해당 함수를 호출하는 구문 앞에 점 또는 대괄호 표기가 있는지 없는지가 관건임.

[74] 메서드 내부 함수에서의 this를 우회하는 방법
호출 주체가 없을 때 자동으로 전역객체를 바인딩하지 않고 호출 당시 주변 환경의 this를 그대로 상속받아 사용할 수 있으면 좋겠음
JS 설계상 이렇게 동작하는 편이 스코프 체인과의 일관성을 지키는 설득력있는 방식이기 때문.
this 역시 현재 컨텍스트에 바인딩된 대상이 없으면 직전 컨텍스트의 this를 바라보도록 하고싶음
ES5까지는 자체적으로 내부함수에 this를 상속할 방법은 없음, 하지만 우회할 방법은 있음 >>변수 활용!

[75] 예제 3-10 내부함수에서의 this 우회

var obj = {
    outer: function(){
        console.log(this); // (1) {outer: f}
        var innerFunc1 = function(){ 
            console.log(this); // (2) Window {... }
        };
        innerFunc1();

        var self = this;
        var innerFunc2 = function(){
            console.log(self); //(3){outer: f}
        };
        innerFunc2();
    }
};
obj.outer();

innerFunc1 내부에서 this는 전역객체를 가리킴, 
outer 스코프에서 self라는 변수에 this를 저장한 상태에서 호출한 innerFun2의 경우 self에는 객체 obj가 출력
허무한 방법이지만... 기대에는 충실히 부합함. 
상위 스코프의 this를 저장해서 내부함수에서 활용하려는 수단일 뿐이므로 의미만 통한다면 변수명을 무엇으로 정해도 무관함. 

[76] this를 바인딩하지 않는 함수
ES6에서는 함수 내부에서 this가 전역객체를 바라보는 문제를 보완하고자 this를 바인딩하지 않는 화살표 함수를 새로 도입함.
화살표 함수는 상위 스코프의 this를 그대로 활용가능.
[76] 예제 3-11 화살표 함수
var obj = {
    outer: function(){
        console.log(this); // (1){outer: f}
        var innerFunc = ()=> {
            console.log(this); // (2) {outer: f}
        
        };
        innerFunc();
    }
};
obj.outer();

그 외 call, apply 등의 메서드를 활용해 함수를 호출할 떄 명시적으로 this를 지정하는 방식도 있음

[76]3-1-4 콜백 함수 호출 시 그 함수 내부에서의 this
함수 A의 제어권을 다른 함수(또는 메서드) B에게 넘겨주는 경우 함수A를 콜백함수라 함.
이때 함수 A는 함수 B의 내부 로직에 따라 실행되며, this 역시 함수 B내부 로직에서 정한 규칙에 따라 값이 결정됨.
this가 전역객체를 참조하지만, 제어권을 받은 함수에서 콜백 함수에 별도로 this가 될 대상을 지정하는 경우 그 대상을 참조하게 됨.
콜백 함수의 제어권을 가지는 함수(메서드)가 콜백 함수에서의 this를 무엇으로 할지를 결정하며, 
특별히 정의하지 않은 경우 기본적으로 함수와 마찬가지로 전역객체를 바라봄

[78] 3-1-5 생성자 함수 내부에서의 this
생성자 함수는 어떤 공통된 성질을 지니는 객체들을 생성할때 사용하는 함수
객체지향 언어에서 생성자를 클래스 , 클래스를 통해 만든 객체를 인스턴스라고 함
JS는 함수에 생성자로서의 역할을 함께 부여함. ㄹ
new 명령어와 함께 함수를 호출하면 해당 함수가 생성자로서 동작함
어떤 함수가 생성자 함수로서 호출된 경우 내부에서의 this는 곧 새로 만들 구체적인 인스턴스 자신이 됨
 
* 생성자 함수를 호출(new 명령어와 함께 함수를 호출)하면 : 구체적 인스턴스 생성 과정
1 생성자의 prototype 프로퍼티를 참조하는 __proto__라는 프로퍼티가 있는 객체(인스턴스)를 만들고, 
미리 준비된 공통 속성 및 개성을 해당 객체(this)에 부여.
[79] 3-13 생성자 함수
var Cat = function(name, age){
    this.bark = '야옹';
    this.name = name;
    this.age = age;
};
var choco = new Cat('초코',7);
var nabi = new Cat('나비', 5);
console.log(choco,nabi);
/* results
 Cat {bark: '야옹', name :'초코', age: 7}
 Cat {bark: '야옹', name: '나비', age: 5}
 */
 Cat 변수에 익명 함수 할당.
 이 함수 내부에서는 this에 접근해 bark, name, age 프로퍼티에 값 대입
 new 명령어와 함께 Cat 함수 호출, 변수 choco, nabi에 각각 할당
 choco, nabi 출력하니 각각 Cat 클래스의 인스턴스 객체가 출력됨.
 6번째 줄 작성자 함수 내부에서 this >choco 인스턴스를,
 7번째 줄 작성자 함수 내부에서 this >nabi 인스턴스를 가리킴을 알 수 있음. 