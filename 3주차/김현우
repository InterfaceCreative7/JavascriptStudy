1-1. 상황에 따라 달라지는 this
    this는 실행 컨텍스트가 생성될 때 결정된다.
    실행 컨텍스트는 함수를 호출할 때 생성되므로 함수를 호출할 때 결정된다 할 수 있다.
    실행 컨텍스트를 활성화할 당시에 this가 지정되지 않은 경우 this는 전역 객체를 바라본다.

1-2. 전역공간에서의 this
    전역공간에서 this는 전역 객체를 가리킨다.

    전역 변수를 선언하면 전역객체의 프로퍼티로도 할당한다.
    var a = 1;
    console.log(a); // 1
    console.log(window.a); // 1
    console.log(this.a); // 1
    js 모든 변수는 특정 객체의 프로퍼티로서 동작한다.
    특정 객체란 실행 컨텍스트의 LexicalEnvironment이다.
    실행 컨텍스트는 변수를 수집해 L.E의 프로퍼티로 저장하고, 변수를 호출하면 L.E를 조회해 일치하는
    프로퍼티를 반환한다.

    전역변수가 곧 전역객체의 프로퍼티이지만, 전역객체의 프로퍼티로 할당하는 경우에는 삭제가
    되는 반면 전역변수로 선언한 경우에는 삭제가 되지 않는다.
    전역 변수를 선언하면 js 엔진이 자동으로 전역객체의 프로퍼티로 할당하면서 추가로 프로퍼티의
    configurable 속성(변경 및 삭제 가능성)을 false로 정의하기 때문이다.

    var a = 1;
    delete window.a; // false
    console.log(a, window.a, this.a); // 1 1 1

    window.b = 2;
    delete window.b; // true
    console.log(b, window.b, this.b); // Reference error: c is not defined

1-3. 메서드로서 호출할 떄 그 메서드 내부에서의 this
    함수와 메서드는 독립성으로 구분할 수 있다.
    함수는 독립적인 기능을 수행하는 반면에,
    메서드는 자신을 호출한 대상 객체에 관한 동작을 수행한다.

    메서드는 어떤 함수를 객체의 프로퍼티에 할당했을 때 객체의 메서드로서 호출할 경우
    메서드로 동작하고, 그렇지 않으면 함수로 동작한다.
    어떤 함수를 호출할 때 그 함수 이름 앞에 객체가 명시되어 있는 지의여부로
    함수로서의 호출인지, 메서드로서의 호출인지 구분 가능하다.

    어떤 함수를 메서드로 호출할 때 호출 주체는 함수명 앞의 객체이다.
    점 표기법의 경우 마지막 점 앞에 명시된 객체가 this가 된다.

    var obj = {
        methodA: function(){console.log(this);},
        inner: {
            methodB: function {console.log(this);}
        }
    };
    obj.methodA(); // {methodA: f, inner{...}} (=== obj)
    obj.inner.methodB(); // {methodB: f} (=== obj.inner)

1-4. 함수로서 호출할 떄 그 함수 내부에서의 this
    this는 호출한 주체에 대한 정보를 담기 때문에 함수로 호출한 경우 this는 지정되지 않아서
    전역 객체를 가리키게 된다.

    var obj1 = {
        outer: function{
            console.log(this); // (this === obj1)
            var innerfunc = function(){
                console.log(this); // (this === window),(this === obj2)
            }
            innerfunc();
            
            var obj2 = {
                innerMethod: innerfunc
            };
            obj2.innerMethod();
        }
    };
    obj1.outer();
    같은 함수를 호출하더라도 바인딩되는 this의 대상이 서로 달라질 수 있다.
    this 바인딩에 관해서는 함수를 실행하는 당시의 주변 환경은 중요하지 않고,
    오직 함수를 호출하는 구문 앞 점 or 대괄호 표기가 있는 지가 관건이다.

    위 방식대로라면 ES5 까지는
    자체적으로 내부함수에 this를 상속할 방법이 없지만 변수를 활용하면 가능하다.

    ES6에서는 함수 내부에서 this가 전역객체를 바라보는 문제를 보완하고자 화살표 함수를 도입.
    화살표 함수는 실행 컨텍스트를 생성할 때 this 바인딩 과정 자체가 빠지게 되어
    상위 스코프의 this를 그대로 활용 가능.

    var obj = {
        outer: function(){
            console.log(this); // {outer: f}
            var innerFunc = () => {
                console.log(this); // {outer: f}
            };
            innerFunc();
        }
    };
    obj.outer();

1-5. 콜백 함수 호출 시 그 함수 내부에서의 this
    함수 A의 제어권을 다른 함수(OR 메서드) B에게 넘겨주는 경우 함수 A를 콜백함수라 한다.
    함수 A는 함수 B의 로직에 따라 실행되고 this 역시 B 내부 로직에 의해 결정된다.

1-6. 생성자 함수 내부에서의 this
    생성자 함수는 어떤 공통된 성질을 지니는 객체들을 생성하는 데 사용하는 함수이다.
    객체지향 언어에서 생성자를 클래스, 클래스를 통해 만든 객체를 인스턴스라 한다.

    프로그래밍적으로 생성자는 구체적인 인스턴스를 만들기 위한 틀이다.
    구체적인 인스턴스의 개성을 더해 개별 인스턴스를 만들 수 있는 것이다.
    new 명령어와 함께 함수를 호출하면 해당 함수는 생성자로 동작하고
    어떤 함수가 생성자 함수로서 호출된 경우 내부에서의 this는 새로 만들 구체적인 인스턴스
    자신이 된다.

    생성자 함수를 호출하면 우선 생성자의 prototype 프로퍼티를 참조하는 __proto__라는 프로퍼티가
    있는 객체(인스턴스)를 만들고 미리 준비된 공통 속성 및 개성을 해당 객체(this)에 부여한다.

    var Cat = function(name, age){
        this.bark = '야옹';
        this.name = name;
        this.age = age;
    };
    var choco = new Cat('초코', 7);
    
    console.log(choco); // Cat {bark: 야옹, name: '초코', age: 7}

    Cat 변수에 익명 함수를 할당하고 new 명령어와 함께 Cat 함수를 호출해서 choco에 할당.
    choco를 출력하면 Cat 클래스의 인스턴스 객체가 출력된다.
    생성자 함수 내부에서의 this는 choco 인스턴스를 가리킨다.







    
