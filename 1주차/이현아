자바스크립트 (깃헙 데스크탑에서 Repository , 오픈 인)

HTML = Hyper Text Markup Language, 링크로 연결된 텍스트페이지를 말함
CSS = Cascading Style Sheet, 웹페이지의 스타일을 만들어 디자인적인 요소를 추가할 수 있음
(HTML로 웹페이지의 뼈대를 만들고 CSS로는 웹페이를 디자인하며 자바스크립트로는 기능을 추가한다고 보면 됨)
(HTML은 별도의 에디터 없이도 얼마든지 사용할 수 있기 때문에 메모장, 워드, 한글 상관무)
(메모장을 사용할 때는 문서를 저장할 때 파일이름을 html으로 저장해야 웹브라우저아이콘이 형성)

제목과 본문 문단을 구분하려면 시작태그와 종료태그를 작성해야함 시작태그는<>, 종료태그는 </> 이 안에 각각의 태그이름을 쓰면된다.

문단구분은 paragraph의 약자인 p (문단의 앞에는 <p>, 문단의 맨끝에는 </p>)
제목을 붙일 때 <h>, </h> (h1~h6까지 가능하고 숫자가 클수록 글자는 작아진다.)

#html 문서는 크게 헤드와 바디로 구분된다. (자바스크립트 시작할때도 <html>, </html> 해야함!)
(역시 <head>, </head>로 본문을 구분할 수 있다)

* 헤드에는 타이틀, 메타태그, 스타일시트 영역
- 타이틀: 브라우저 제목
- 메타태그: 해당 웹 페이지를 설명하는 태그,검색엔진이나 브라우저가 접근할 때 사용할 수 있는 정보를 담고 있음
- 스타일시트: 해당페이지를 꾸미기 위한 스타일(폰트, 색상, 배경등)을 정함. HTML문서내에서 스타일 태그를 사용하여 정해줄 수 도 있지만, 주로 별도의 CSS파일을 만든다.

* 바디에는 본문영역 이안에서도 자바스크립트 영역 <script> </script> 
본문에는 사용자에게 보여주고자 하는 컨텐츠내용, 자바스크립트 안에서는 추가하고 싶은 기능을 제어할 수 있다

<1주차>

2주차

실행컨텍스트: 실행할 코드에 제공할 환경정보들을 모아놓은 객체
전역실행 컨텍스트: 자바스크립트 구동환경이 별도로 제공되는 객체, 자바스크립크 내장객체가 아닌 호스트 객체(실행환경에서 정의된 객체)로 분류된다

* 실행 컨텍스트
스택: 입력할 때엔 abcd로 입력했지만 출력할 땐 dcba 수 밖에 없는 구조
큐: 입력한 순서대로 출력값이 나오는 구조
-동일한 환경에 있는 코드들을 실행할 때 필요한 정보들을 모아 콜스택(실행컨텍스트객체)에 쌓았다가 가장 위에 쌓여있는 컨텍스트와 관련있는 코드들을 순서대로 실행함.
=> 컨텍스트코드를 실행할 수 있는 방법으로는 함수실행이 있음.

* 전역컨텍스트: 전체적인 틀은 실행컨텍스트와 유사. 최상단의 공간은 코드내부에서 별도의 실행 명령이 없어도 브라우저에서 자동으로 실행되므로 자바파일이 열리는 순간 활성화됨.
(함수에서 변수의 값에 할당되고 나면 함수 실행이 종료되면서 실행컨텍스트가 콜스텍에서 제거되는 시스템.) 
(스텍의 구조상 쌓이는 순간이 지금 실행될 코드에 관여하는 시점임을 알 수 있음.)

* LexicalEnvironment: VariableEnvroment와 담기는 내용은 비슷하지만 변경사항이 실시간으로 반영됨.
수시로 환경정보를 의미 (a,b,c와 같은 식별자들이 존재하고 외부정보 d 를 참조하는 구조, 환경정보들을 사전에서 접한다는 개념)

* VariableEnvroment: (변수환경) 최초의 스냅샷을 유지함. 변경사항이 실시간으로 반영되지 않음. 실행 컨텍스트를 생성할 때 정보를 먼저 담은 다음, 이를 그대로 복사해서 LexicalEnvironment를 만들고 이후에는 LexicalEnvironment를 주로 사용한다.
(LexicalEnvironment와 VariableEnvroment의 내부는 environmentRecrod와 outer-Environment로 구성되어있다.)

* environmentRecrod와 호이스팅
environmentRecrod에는 현재 컨텍스트와 관련된 코드의 식별자 정보들이 저장됨.
함수 매개변수 식별자, 선언한 함수가 있을 경우 그 함수 자체나 var로 선언된 변수의 식별자에 해당 *** 순서대로 *** 수집한다.

- 호이스팅규칙: 변수선언을 맨위에 가장 먼저 해주는 것 같음. 먼저 변수를 선언하고 특정값으로 초기화를 하고 마지막으로 변수를 사용
- 함수 선언문: function의 정의부만 존재하고 변도의 할당명령이 없는 것을 의미, 이 경우 반드시 함수명이 정의되어 있어야 함.
- 함수 표현식: 정의한 function을 별도의 변수에 할당하는 것을 의미, 함수명이 반드시 존재하지 않아도 됨.
**함수명이 정의되어 있는 함수표현식을 기명함수표현식, 정의하지 않은 것을 익명 함수 표현식 --> 일반적인 함수 표현식은 익명함수표현식

**기명함수표현식 주의할 점: 외부에서는 함수명으로 함수를 호출할 수 없다.
(기명함수표현이 디버깅시 어떤 함수인지 추적하기에 훨씬 효율적이다.)
*sum함수는 호출한 후에 선언해도 크게 문제가 되진 않지만 선언한 후에 호출하는 것이 바람직하다.

*함수선언문의 위험성 
호출한 함수가 여러개여도, 코드를 실행하는 도중에 실제로 호출되는 함수는 오직 마지막에 할당한 함수 즉 맨 마지막에 선언된 함수 하나 뿐이기 떄문에 실제로는 전혀 다른 문자열이 출력된다. 하지만 sum함수는 오류가 뜨지 않음->sum함수의 결과를 활용하는 다른 함수에서도 숫자 대신 문자열을 넘겨받았음에도 오류없이 통과됨. 이를 함수표현식으로 정의했다면 전역공간에 함수가 여럿 존재하는 상황이라고 표현된 함수가 모두 함수표현식이라고 하면 오류가 발생하지 않을 것이다. 
