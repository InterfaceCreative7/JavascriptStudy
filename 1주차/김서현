var a; //a 선언
a = 'abc'; //a에 데이터 할당

var a = 'abc'; //선언과 할당을 동시에
/*
[6]: 데이터 처리효율을 위해: 변수 영역, 데이터 영역 분리
*/

a = a+ 'def';

/* 
[9] : 새로운 문자열을 만들어 a에 저장
  abc 와 abcdef 완전 별개의 데이터 */
  /*중복되는 것이 있을시 주소 재활용 가능*/


//[10]: '참조형데이터를 변수에 할당한다'
/* 
[11]: 불변한다의 뜻 프로퍼티??
[12]: 데이터는 사용자가 지정한 이름, 저장하려는 값, @주소의 형태를 띤다
*/

//참조형 데이터 프로퍼티 재할당
var obj1 = {
    a:1, b:'bbb'
// = 를 안쓰고 : 형식으로 바뀜....
};

obj1.a = 2;
//새로운 객체생성x, 이럴 경우 객체 내부의 값만 바뀐것임

/*
[13]: 중첩객체, 데이터칸에 @주소가 줄줄이 생김
데이터 저장하는 공간 따로, @주소 저장하는 공간 따로
*/

var obj = {
    x:3, arr:[3,4,5]
};
/*배열 요소가 3개이므로 3개 변수공간확보후 각각 인덱스부여
GC개념까지, 여기까지가 [15]까지의 내용들
전반적으로 데이터와 주소들이 어떻게 다뤄지는지 머리속 구조화가 중요해보임*/

//[15]: 변수 복사 비교
var a = 10;
var b = a;
var obj1 = { c:10 , d:'ddd'};
var obj2 = obj1;
/*
[17]: 데이터 할당과정에서 이미 차이가 있기 떄문에 
변수 복사 이후의 동작에 큰 차이 발생*/

//#1 객체 프로퍼티 변경: 기본형데이터와 참조형 데이터의 차이 파악  
var a = 10;
var b = a;
var obj1 = { c:10 , d:'ddd'};
var obj2 = obj1;

b = 15;
obj2.c = 20;

//#2 객체 자체 변경: '가변'= 참조데이터 자체가 아니라 내부 프로퍼티를 변경할떄 성립한다
var a = 10;
var b = a;
var obj1 = { c:10 , d:'ddd'};
var obj2 = obj1;

b = 15;
obj2 = {c: 20, d : 'ddd'};

/*[20] ##05 불변객체
[21]: 값으로 전달받은 객체에 변경을 가하더라도 
원본 객체는 변하지 않아야 하는 경우
*/
